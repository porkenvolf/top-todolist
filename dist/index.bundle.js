(()=>{"use strict";var n={797:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap);"]),i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n","",{version:3,sources:["webpack://./src/css/equalize.css"],names:[],mappings:"AACA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,iCAAiC;AACrC;AACA;;;;IAII,oBAAoB;IACpB,eAAe;AACnB;AACA;;;;IAII,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:["@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\");\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n"],sourceRoot:""}]);const s=i},399:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,".modal {\n    background-color: rgba(0, 0, 0, 0.7);\n    position: fixed;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 25px;\n}\n.modal-body {\n    background-color: var(--mid-bg);\n    border-radius: 10px;\n    padding: 25px;\n    width: min(100%, 600px);\n}\n.modal .top-bar {\n    display: flex;\n    justify-content: space-between;\n}\n.modal li {\n    display: flex;\n    margin-bottom: 1rem;\n}\n.modal input,\nselect {\n    flex: 1;\n    background-color: var(--dark-bg);\n    border: 1px solid var(--border);\n    padding: 15px;\n    color: var(--text);\n}\n.modal option {\n    color: var(--text);\n}\n.modal #btnModalClose {\n    position: relative;\n    background-color: transparent;\n    border: none;\n    width: 2rem;\n    margin-bottom: 1.5rem;\n}\n.modal #addBookSubmit {\n    background-color: var(--primary);\n    border: none;\n    border-radius: 10px;\n    padding: 15px;\n    flex: 1;\n    color: var(--text);\n    font-weight: bold;\n    font-size: 1.5rem;\n}\n.modal button:hover {\n    filter: brightness(150%);\n}\n","",{version:3,sources:["webpack://./src/css/modal.css"],names:[],mappings:"AAAA;IACI,oCAAoC;IACpC,eAAe;IACf,OAAO;IACP,aAAa;IACb,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,+BAA+B;IAC/B,mBAAmB;IACnB,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,8BAA8B;AAClC;AACA;IACI,aAAa;IACb,mBAAmB;AACvB;AACA;;IAEI,OAAO;IACP,gCAAgC;IAChC,+BAA+B;IAC/B,aAAa;IACb,kBAAkB;AACtB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,kBAAkB;IAClB,6BAA6B;IAC7B,YAAY;IACZ,WAAW;IACX,qBAAqB;AACzB;AACA;IACI,gCAAgC;IAChC,YAAY;IACZ,mBAAmB;IACnB,aAAa;IACb,OAAO;IACP,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;AACrB;AACA;IACI,wBAAwB;AAC5B",sourcesContent:[".modal {\n    background-color: rgba(0, 0, 0, 0.7);\n    position: fixed;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 25px;\n}\n.modal-body {\n    background-color: var(--mid-bg);\n    border-radius: 10px;\n    padding: 25px;\n    width: min(100%, 600px);\n}\n.modal .top-bar {\n    display: flex;\n    justify-content: space-between;\n}\n.modal li {\n    display: flex;\n    margin-bottom: 1rem;\n}\n.modal input,\nselect {\n    flex: 1;\n    background-color: var(--dark-bg);\n    border: 1px solid var(--border);\n    padding: 15px;\n    color: var(--text);\n}\n.modal option {\n    color: var(--text);\n}\n.modal #btnModalClose {\n    position: relative;\n    background-color: transparent;\n    border: none;\n    width: 2rem;\n    margin-bottom: 1.5rem;\n}\n.modal #addBookSubmit {\n    background-color: var(--primary);\n    border: none;\n    border-radius: 10px;\n    padding: 15px;\n    flex: 1;\n    color: var(--text);\n    font-weight: bold;\n    font-size: 1.5rem;\n}\n.modal button:hover {\n    filter: brightness(150%);\n}\n"],sourceRoot:""}]);const s=i},195:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAAA;IACI,oCAAoC;AACxC;AACA;IACI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,0BAA0B;IAC1B,mDAAmD;AACvD;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n"],sourceRoot:""}]);const s=i},402:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),s=t(797),d=t(195),A=t(728),c=t(399),l=i()(a());l.i(s.Z),l.i(d.Z),l.i(A.Z),l.i(c.Z),l.push([n.id,'body {\n    min-height: 100vh;\n    background: red;\n    display: grid;\n    grid-template-columns: 20vw 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    max-width: 30rem;\n}\n#mainContent .card .name {\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n    width: 100%;\n    background: transparent;\n    border: none;\n}\n\n#mainContent .card .description {\n}\n#mainContent ul {\n    flex: 1;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: auto;\n    margin: 0 10px;\n}\n',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAKA;IACI,iBAAiB;IACjB,eAAe;IACf,aAAa;IACb,+BAA+B;IAC/B,iCAAiC;IACjC,kBAAkB;AACtB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;AACA;IACI,qBAAqB;AACzB;AACA;IACI,0BAA0B;IAC1B,sCAAsC;IACtC,iBAAiB;IACjB,WAAW;IACX,aAAa;AACjB;AACA;IACI,cAAc;IACd,cAAc;IACd,yBAAyB;IACzB,qCAAqC;IACrC,aAAa;AACjB;AACA;IACI,cAAc;;IAEd,OAAO;IACP,aAAa;IACb,yBAAyB;IACzB,aAAa;IACb,2DAA2D;IAC3D,SAAS;IACT,qBAAqB;AACzB;AACA;IACI,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,2BAA2B;IAC3B,+BAA+B;IAC/B,mBAAmB;IACnB,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,sBAAsB;IACtB,8BAA8B;IAC9B,WAAW;IACX,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,uBAAuB;IACvB,YAAY;AAChB;;AAEA;AACA;AACA;IACI,OAAO;AACX;AACA;IACI,WAAW;IACX,cAAc;AAClB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;IACX,cAAc;AAClB",sourcesContent:['@import url(./equalize.css);\n@import url(./scrollbar.css);\n@import url(./variables.css);\n@import url(./modal.css);\n\nbody {\n    min-height: 100vh;\n    background: red;\n    display: grid;\n    grid-template-columns: 20vw 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    max-width: 30rem;\n}\n#mainContent .card .name {\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n    width: 100%;\n    background: transparent;\n    border: none;\n}\n\n#mainContent .card .description {\n}\n#mainContent ul {\n    flex: 1;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: auto;\n    margin: 0 10px;\n}\n'],sourceRoot:""}]);const u=l},728:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,gBAAgB;AACpB",sourcesContent:[":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var d=n[s],A=r.base?d[0]+r.base:d[0],c=o[A]||0,l="".concat(A," ").concat(c);o[A]=c+1;var u=t(l),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=a(p,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var d=r(n,a),A=0;A<o.length;A++){var c=t(o[A]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=d}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n={Pubsub:{},on:function(n,e){this.Pubsub[n]=this.Pubsub[n]||[],this.Pubsub[n].push(e)},off:function(n,e){if(this.Pubsub[n])for(var t=0;t<this.Pubsub[n].length;t++)if(this.Pubsub[n][t]===e){this.Pubsub[n].splice(t,1);break}},emit:function(n,e){this.Pubsub[n]&&this.Pubsub[n].forEach((function(n){n(e)}))}};class e{#n;#e;#t;constructor(n,e){this.#n=n,this.#e=e,this.#t=void 0}get name(){return this.#n}set name(n){this.#n=n}get isDone(){return this.#e}set isDone(e){this.#e=e,n.emit("reloadPage")}get dueDate(){return this.#t}set dueDate(n){this.#t=n}get parse(){return{name:this.#n,isDone:this.#e,dueDate:this.#t}}}class r{#r;#n;#a={};constructor(n,t,r){if(this.#r=n,this.#n=t,r)for(const n in r)this.#a[n]=new e(r[n].name,r[n].isDone)}get tasks(){return this.#a}get name(){return this.#n}set name(e){this.#n=e,n.emit("reloadPage")}get id(){return this.#r}get parse(){return{name:this.#n,tasks:this.#a}}}class a{static#o=[];static#i=[];static populate(){this.#o.push(new r(this.#o.length,"Default List",{0:{name:"dsa",isDone:!0},1:{name:"test",isDone:!1}})),this.save()}static createList(){this.#o.push(new r(this.#o.length,"New List",{}))}static save(){localStorage.clear(),this.#o.forEach(((n,e)=>{localStorage.setItem(e,JSON.stringify(n.parse))})),this.load()}static load(){for(let n=0;n<localStorage.length;n++){const e=JSON.parse(localStorage[n]);this.#i.push(new r(e.name,e.tasks))}}static get listsStorage(){return this.#o}}var o=t(379),i=t.n(o),s=t(795),d=t.n(s),A=t(569),c=t.n(A),l=t(565),u=t.n(l),p=t(216),m=t.n(p),b=t(589),C=t.n(b),g=t(402),h={};h.styleTagTransform=C(),h.setAttributes=u(),h.insert=c().bind(null,"head"),h.domAPI=d(),h.insertStyleElement=m(),i()(g.Z,h),g.Z&&g.Z.locals&&g.Z.locals;class f{#s;#d;constructor(n){return this.#d=n,this.#A(),this.#c(),this.#s}#A(){const n=document.createElement("div");n.classList.add("card"),n.innerHTML=`\n            <input class=name type='text' value='${this.#d.name}'>\n            <ul>\n            </ul>\n            <progress></progress>\n        `;const e=this.#d.tasks;let t=0;const r=n.querySelector("ul");for(const n in e){const a=document.createElement("li"),o=document.createElement("input");o.type="checkbox",o.checked=e[n].isDone,o.checked&&(t+=1),o.setAttribute("data-taskid",n),a.appendChild(o);const i=document.createElement("span");i.innerText=e[n].name,a.appendChild(i),r.appendChild(a)}const a=n.querySelector("progress");a.max=Object.keys(e).length,a.value=t,this.#s=n}#c(){this.#s.querySelector(".name").addEventListener("change",(n=>{n.preventDefault(),this.#d.name=n.target.value})),this.#s.querySelectorAll('input[type="checkbox"]').forEach((n=>{n.addEventListener("click",(n=>{const e=n.target.getAttribute("data-taskid");this.#d.tasks[e].isDone=n.target.checked}))}))}}class B{static loadPage(){this.body=document.querySelector("body"),this.body.innerHTML="",this.#l(),this.#u(),this.renderLists()}static#u(){const n=document.createElement("div");n.innerHTML="\n            <h2>Dashboard</h2>\n        ",n.id="leftPanel",this.body.appendChild(n)}static#l(){const n=document.createElement("div");n.innerHTML="DewDew.it",n.id="nav",this.body.appendChild(n)}static renderLists(){const e=document.createElement("div");e.id="mainButtons",this.body.appendChild(e);const t=document.createElement("button");t.innerText="New List",e.appendChild(t),t.addEventListener("click",(e=>{n.emit("newList")}));const r=document.createElement("div");r.id="mainContent",this.body.appendChild(r),a.listsStorage.forEach((n=>{r.appendChild(new f(n))}))}static#p(){const n=document.createElement("div");n.id="mainButtons",this.body.appendChild(n);const e=document.createElement("button");e.innerText="New Project",n.appendChild(e),e.addEventListener("click",(n=>{this.#m()}));const t=document.createElement("div");t.id="mainContent",this.body.appendChild(t),t.innerHTML='\n                    <div class="content">\n                        <div class="card">\n                            <div class="name">Project 1</div>\n                            <div class="description">\n                                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                                Suscipit, dolorem autem rem maiores sunt fugit! Magni\n                                consectetur tenetur placeat ipsam nesciunt beatae\n                                deserunt nisi aut.\n                            </div>\n\n                            <h2>Active Lists</h2>\n                            <ul>\n                                <li>List 1</li>\n                                <li>List 2</li>\n                                <li>List 3</li>\n                                <li>List 4</li>\n                            </ul>\n                            <div class="pending">3 pending tasks in 2 lists.</div>\n                            <progress max="100" value="70"></progress>\n                            <button>Go to project</button>\n                        </div>\n                    </div>'}static#b(){const n=document.createElement("div");n.id="mainButtons",this.body.appendChild(n);const e=document.createElement("button");e.innerText="New Project",n.appendChild(e),e.addEventListener("click",(n=>{this.#m()}))}static#m(){const n=document.createElement("div");n.classList.add("modal"),this.body.appendChild(n)}}a.populate(),class{static bindEvents(){n.on("checkStorage",(()=>{console.log(a.listsStorage)})),n.on("reloadPage",(()=>{B.loadPage()})),n.on("newList",(()=>{a.createList(),B.loadPage()}))}}.bindEvents(),B.loadPage()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,