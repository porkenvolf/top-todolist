(()=>{"use strict";var n={797:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap);"]),o.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n","",{version:3,sources:["webpack://./src/css/equalize.css"],names:[],mappings:"AACA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,iCAAiC;AACrC;AACA;;;;IAII,oBAAoB;IACpB,eAAe;AACnB;AACA;;;;IAII,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:["@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\");\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n"],sourceRoot:""}]);const s=o},25:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,"footer {\n    background: var(--bg-dark);\n    width: 100vw;\n    text-align: center;\n    border-top: 2px solid var(--border);\n}\nfooter a {\n    color: var(--text);\n}\n","",{version:3,sources:["webpack://./src/css/footer.css"],names:[],mappings:"AAAA;IACI,0BAA0B;IAC1B,YAAY;IACZ,kBAAkB;IAClB,mCAAmC;AACvC;AACA;IACI,kBAAkB;AACtB",sourcesContent:["footer {\n    background: var(--bg-dark);\n    width: 100vw;\n    text-align: center;\n    border-top: 2px solid var(--border);\n}\nfooter a {\n    color: var(--text);\n}\n"],sourceRoot:""}]);const s=o},195:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAAA;IACI,oCAAoC;AACxC;AACA;IACI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,0BAA0B;IAC1B,mDAAmD;AACvD;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n"],sourceRoot:""}]);const s=o},402:(n,t,e)=>{e.d(t,{Z:()=>p});var r=e(537),i=e.n(r),a=e(645),o=e.n(a),s=e(797),A=e(195),d=e(728),c=e(25),l=o()(i());l.i(s.Z),l.i(A.Z),l.i(d.Z),l.i(c.Z),l.push([n.id,'body {\n    min-height: 100vh;\n    background: var(--dark-bg);\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    border: 2px solid transparent;\n    transition: 200ms;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    font-size: 2rem;\n    font-weight: bold;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: flex-start;\n\n    width: 100%;\n    max-width: 50rem;\n}\n#mainContent .card #title {\n    display: flex;\n}\n#mainContent .card #title .parentHoverRemoveList {\n    padding: 5px;\n    flex: 0;\n    height: 3rem;\n    transition: 200ms;\n    filter: opacity(0);\n    border-radius: 50px;\n    margin-left: 10px;\n}\n#mainContent .card:hover .parentHoverRemoveList {\n    filter: opacity(1) invert(1) brightness(80%) !important;\n}\n#mainContent .card .parentHoverRemoveList:hover {\n    background: rgb(153, 120, 93);\n}\n#mainContent .card .name {\n    flex: 1;\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n}\n\n#mainContent ul {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: 1rem;\n    margin: 0 10px;\n    filter: saturate(0);\n}\n#mainContent .card input[type="text"] {\n    background: transparent;\n    border: none;\n    flex: 1;\n    color: var(--text);\n    padding: 5px;\n}\n#mainContent .card input.isDone {\n    text-decoration: line-through;\n    color: grey;\n}\n#mainContent .card .parentHoverRemoveTask {\n    padding: 5px;\n    margin: 0px;\n    background-color: transparent;\n    height: 2rem;\n    filter: opacity(0);\n    transition: 200ms;\n    margin-left: 10px;\n}\n#mainContent .card li:hover .parentHoverRemoveTask {\n    filter: opacity(1) invert(1) brightness(80%);\n}\n#mainContent .card li:hover {\n    border-top: 2px solid var(--border);\n    border-bottom: 2px solid var(--border);\n}\n#mainContent .card .parentHoverRemoveTask:hover {\n    background: rgb(153, 120, 93);\n    border-radius: 50px;\n}\n#mainContent .card .plusIcon {\n    height: 1rem;\n    margin: 0 10px;\n    filter: invert(1) brightness(70%);\n}\n@media (pointer: none), (pointer: coarse) {\n    #mainContent .card #title .parentHoverRemoveList {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    #mainContent .card .parentHoverRemoveTask {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    li:last-child {\n        border-bottom: none;\n    }\n    li {\n        border-bottom: 2px solid var(--border);\n    }\n}\n',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAKA;IACI,iBAAiB;IACjB,0BAA0B;IAC1B,aAAa;IACb,0BAA0B;IAC1B,iCAAiC;IACjC,kBAAkB;AACtB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;AACA;IACI,qBAAqB;IACrB,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,iBAAiB;AACrB;AACA;IACI,0BAA0B;IAC1B,sCAAsC;IACtC,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,cAAc;IACd,cAAc;IACd,yBAAyB;IACzB,qCAAqC;IACrC,aAAa;AACjB;AACA;IACI,cAAc;;IAEd,OAAO;IACP,aAAa;IACb,yBAAyB;IACzB,aAAa;IACb,2DAA2D;IAC3D,SAAS;IACT,qBAAqB;AACzB;AACA;IACI,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,2BAA2B;IAC3B,+BAA+B;IAC/B,mBAAmB;IACnB,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,sBAAsB;IACtB,2BAA2B;;IAE3B,WAAW;IACX,gBAAgB;AACpB;AACA;IACI,aAAa;AACjB;AACA;IACI,YAAY;IACZ,OAAO;IACP,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;AACrB;AACA;IACI,uDAAuD;AAC3D;AACA;IACI,6BAA6B;AACjC;AACA;IACI,OAAO;IACP,eAAe;IACf,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,WAAW;IACX,cAAc;AAClB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;IACX,cAAc;IACd,mBAAmB;AACvB;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,OAAO;IACP,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,6BAA6B;IAC7B,WAAW;AACf;AACA;IACI,YAAY;IACZ,WAAW;IACX,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;AACrB;AACA;IACI,4CAA4C;AAChD;AACA;IACI,mCAAmC;IACnC,sCAAsC;AAC1C;AACA;IACI,6BAA6B;IAC7B,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,cAAc;IACd,iCAAiC;AACrC;AACA;IACI;QACI,4CAA4C;IAChD;IACA;QACI,4CAA4C;IAChD;IACA;QACI,mBAAmB;IACvB;IACA;QACI,sCAAsC;IAC1C;AACJ",sourcesContent:['@import url(./equalize.css);\n@import url(./scrollbar.css);\n@import url(./variables.css);\n@import url(./footer.css);\n\nbody {\n    min-height: 100vh;\n    background: var(--dark-bg);\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    border: 2px solid transparent;\n    transition: 200ms;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    font-size: 2rem;\n    font-weight: bold;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: flex-start;\n\n    width: 100%;\n    max-width: 50rem;\n}\n#mainContent .card #title {\n    display: flex;\n}\n#mainContent .card #title .parentHoverRemoveList {\n    padding: 5px;\n    flex: 0;\n    height: 3rem;\n    transition: 200ms;\n    filter: opacity(0);\n    border-radius: 50px;\n    margin-left: 10px;\n}\n#mainContent .card:hover .parentHoverRemoveList {\n    filter: opacity(1) invert(1) brightness(80%) !important;\n}\n#mainContent .card .parentHoverRemoveList:hover {\n    background: rgb(153, 120, 93);\n}\n#mainContent .card .name {\n    flex: 1;\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n}\n\n#mainContent ul {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: 1rem;\n    margin: 0 10px;\n    filter: saturate(0);\n}\n#mainContent .card input[type="text"] {\n    background: transparent;\n    border: none;\n    flex: 1;\n    color: var(--text);\n    padding: 5px;\n}\n#mainContent .card input.isDone {\n    text-decoration: line-through;\n    color: grey;\n}\n#mainContent .card .parentHoverRemoveTask {\n    padding: 5px;\n    margin: 0px;\n    background-color: transparent;\n    height: 2rem;\n    filter: opacity(0);\n    transition: 200ms;\n    margin-left: 10px;\n}\n#mainContent .card li:hover .parentHoverRemoveTask {\n    filter: opacity(1) invert(1) brightness(80%);\n}\n#mainContent .card li:hover {\n    border-top: 2px solid var(--border);\n    border-bottom: 2px solid var(--border);\n}\n#mainContent .card .parentHoverRemoveTask:hover {\n    background: rgb(153, 120, 93);\n    border-radius: 50px;\n}\n#mainContent .card .plusIcon {\n    height: 1rem;\n    margin: 0 10px;\n    filter: invert(1) brightness(70%);\n}\n@media (pointer: none), (pointer: coarse) {\n    #mainContent .card #title .parentHoverRemoveList {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    #mainContent .card .parentHoverRemoveTask {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    li:last-child {\n        border-bottom: none;\n    }\n    li {\n        border-bottom: 2px solid var(--border);\n    }\n}\n'],sourceRoot:""}]);const p=l},728:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,gBAAgB;AACpB",sourcesContent:[":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(o[A]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);r&&o[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var A=n[s],d=r.base?A[0]+r.base:A[0],c=a[d]||0,l="".concat(d," ").concat(c);a[d]=c+1;var p=e(l),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var m=i(u,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:m,references:1})}o.push(l)}return o}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=e(a[o]);t[s].references--}for(var A=r(n,i),d=0;d<a.length;d++){var c=e(a[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=A}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!n;)n=r[i--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{const n={Pubsub:{},on:function(n,t){this.Pubsub[n]=this.Pubsub[n]||[],this.Pubsub[n].push(t)},off:function(n,t){if(this.Pubsub[n])for(var e=0;e<this.Pubsub[n].length;e++)if(this.Pubsub[n][e]===t){this.Pubsub[n].splice(e,1);break}},emit:function(n,t){this.Pubsub[n]&&this.Pubsub[n].forEach((function(n){n(t)}))}};class t{#n;#t;#e;constructor(n,t){this.#n=n,this.#t=t,this.#e=void 0}get name(){return this.#n}set name(n){this.#n=n}get isDone(){return this.#t}set isDone(n){this.#t=n}get dueDate(){return this.#e}set dueDate(n){this.#e=n}get parse(){return{name:this.#n,isDone:this.#t,dueDate:this.#e}}}class r{#r;#n;#i={};#a=[];constructor(n,e,r){if(this.#r=n,this.#n=e,r)for(const n in r)this.#i[n]=new t(r[n].name,r[n].isDone)}get tasks(){return this.#i}set tasks(n){}get name(){return this.#n}set name(n){this.#n=n}get id(){return this.#r}get parse(){let n={};for(const t in this.#i)n[t]=this.#i[t].parse;return{id:this.#r,name:this.#n,tasks:n}}}class i{static#o={};static clear(){localStorage.clear()}static save(){localStorage.clear();const n=[];for(const t in this.#o)n.push([t,this.#o[t].parse]);const t=new Map(n);localStorage.setItem("data",JSON.stringify(Array.from(t.entries())));const e=localStorage;console.log(e)}static load(){this.#o={};const n=JSON.parse(localStorage.getItem("data"));n&&n.forEach((n=>{console.log(n);const t=n[0],e=n[1];this.#o[t]=new r(t,e.name,e.tasks)}))}static get listsStorage(){return this.#o}}var a=e(379),o=e.n(a),s=e(795),A=e.n(s),d=e(569),c=e.n(d),l=e(565),p=e.n(l),u=e(216),m=e.n(u),C=e(589),g=e.n(C),h=e(402),b={};b.styleTagTransform=g(),b.setAttributes=p(),b.insert=c().bind(null,"head"),b.domAPI=A(),b.insertStyleElement=m(),o()(h.Z,b),h.Z&&h.Z.locals&&h.Z.locals;const v=e.p+"97d4c0a10ac97607dc65.svg",f=e.p+"3cffe9a515498593b872.svg";class I{#s;#A;constructor(n){this.#s=n,this.#A=this.#d(),this.#c()}#d(){const n=document.createElement("input");return n.type="text",n.classList.add("name"),n.value=this.#s.name,n}#c(){const t=this.#A;t.addEventListener("click",(n=>{n.target.select()})),t.addEventListener("change",(t=>{t.preventDefault(),n.emit("updateListName",{id:this.#s.id,newName:t.target.value}),n.emit("reloadPage")}))}get output(){return this.#A}}class B{#s;#A;constructor(n){this.#s=n,this.#A=this.#d(),this.#c()}#d(){const n=document.createElement("img");return n.src=v,n.classList.add("parentHoverRemoveList"),n}#c(){this.#A.addEventListener("click",(()=>{n.emit("removeList",this.#s),n.emit("reloadPage")}))}get output(){return this.#A}}class x{#s;#A;constructor(n){this.#s=n,this.#A=this.#d(),this.#c()}#d(){const n=this.#s.tasks,t=document.createElement("ul");for(const e in n){const r=document.createElement("li"),i=document.createElement("input");i.type="checkbox",i.checked=n[e].isDone,i.setAttribute("data-taskid",e),r.appendChild(i);const a=document.createElement("input");a.classList.add("task"),a.type="text",a.setAttribute("data-taskid",e),a.value=n[e].name,n[e].isDone&&a.classList.add("isDone"),r.appendChild(a);const o=document.createElement("img");o.src=v,o.classList="parentHoverRemoveTask",o.setAttribute("data-taskid",e),r.appendChild(o),t.appendChild(r)}const e=document.createElement("li"),r=document.createElement("input");r.type="text",r.classList.add("newTask"),r.placeholder="Add new task",r.innerText="";const i=document.createElement("img");return i.src=f,i.classList.add("plusIcon"),e.appendChild(i),e.appendChild(r),t.appendChild(e),t}#c(){this.#A.querySelectorAll('input[type="checkbox"]').forEach((t=>{t.addEventListener("click",(t=>{const e=this.#s.id,r=t.target.getAttribute("data-taskid"),i=t.target.checked;n.emit("updateIsDone",{listID:e,taskID:r,newIsDone:i}),n.emit("reloadPage")}))})),this.#A.querySelectorAll(".task").forEach((t=>{t.addEventListener("change",(t=>{const e=t.target.getAttribute("data-taskid");this.#s.tasks[e].name=t.target.value,n.emit("reloadPage")}))})),this.#A.querySelector(".newTask").addEventListener("change",(t=>{const e=t.target.value,r=this.#s.id;n.emit("newTask",{name:e,isDone:!1,listID:r}),n.emit("reloadPage")})),this.#A.querySelectorAll(".parentHoverRemoveTask").forEach((t=>{t.addEventListener("click",(t=>{delete this.#s.tasks[t.target.getAttribute("data-taskid")],n.emit("reloadPage")}))}))}get output(){return this.#A}}class k{#l;#s;color;constructor(n){return this.#s=n,this.color={h:255*n.id,s:70,l:70},this.#d(),this.#c(),this.#l}#d(){const n=document.createElement("div");n.classList.add("card"),n.style.borderTop=`20px solid hsl(\n            ${this.color.h},\n            ${this.color.s}%,\n            ${this.color.l}%)`,n.innerHTML="\n            <div id='title'></div>\n        ",n.querySelector("#title").appendChild(new I(this.#s).output),n.querySelector("#title").appendChild(new B(this.#s).output),n.appendChild(new x(this.#s).output),this.#l=n}#c(){}}class y{static loadPage(){this.body=document.querySelector("body"),this.body.innerHTML="",this.#p(),this.#u(),this.body.appendChild(function(n){let t,e=(new Date).getFullYear();t=n,n.includes(e)||(t=t+"-"+e+" - ");const r=document.createElement("footer");return r.innerHTML=`\n    <small>\n        &copy; Copyright ${t}\n        <a href="https://github.com/porkenvolf" target="”_blank”">\n            Porkenvölf\n        </a>\n    </small>\n    `,r.style.display="flex",r.style.justifyContent="center",r.style.alignItems="center",r.style.height="3rem",r}("2023"))}static#p(){const n=document.createElement("div");n.innerHTML="DewDew.it",n.id="nav",this.body.appendChild(n)}static#u(){const t=document.createElement("div");t.id="mainButtons",this.body.appendChild(t);const e=document.createElement("button");e.innerText="New List",t.appendChild(e),e.addEventListener("click",(t=>{n.emit("newList")}));const r=document.createElement("div");r.id="mainContent",this.body.appendChild(r);const a=i.listsStorage;for(const n in a)r.appendChild(new k(a[n]))}}(class{static bindEvents(){n.on("save",(()=>{i.save()})),n.on("load",(()=>{i.load()})),n.on("reloadPage",(()=>{y.loadPage(),n.emit("save")})),n.on("newList",(()=>{const t=Math.random().toFixed(5),e=new r(t,"New List",{});i.listsStorage[t]=e,n.emit("reloadPage")})),n.on("removeList",(t=>{delete i.listsStorage[t.id],n.emit("reloadPage")})),n.on("updateListName",(n=>{const t=n.id,e=n.newName;i.listsStorage[t].name=e})),n.on("newTask",(n=>{const e=n.name,r=n.isDone,a=n.listID,o=Math.random(),s=new t(e,r);i.listsStorage[a].tasks[o]=s})),n.on("updateIsDone",(n=>{const t=n.listID,e=n.taskID,r=n.newIsDone;i.listsStorage[t].tasks[e].isDone=r}))}}).bindEvents(),n.emit("load"),y.loadPage()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,