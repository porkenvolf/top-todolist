(()=>{"use strict";var n={797:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap);"]),o.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n","",{version:3,sources:["webpack://./src/css/equalize.css"],names:[],mappings:"AACA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,iCAAiC;AACrC;AACA;;;;IAII,oBAAoB;IACpB,eAAe;AACnB;AACA;;;;IAII,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:["@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\");\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n"],sourceRoot:""}]);const s=o},195:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAAA;IACI,oCAAoC;AACxC;AACA;IACI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,0BAA0B;IAC1B,mDAAmD;AACvD;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n"],sourceRoot:""}]);const s=o},402:(n,t,e)=>{e.d(t,{Z:()=>l});var r=e(537),a=e.n(r),i=e(645),o=e.n(i),s=e(797),d=e(195),c=e(728),A=o()(a());A.i(s.Z),A.i(d.Z),A.i(c.Z),A.push([n.id,'body {\n    min-height: 100vh;\n    background: red;\n    display: grid;\n    grid-template-columns: 20vw 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    border: 2px solid transparent;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    max-width: 30rem;\n}\n#mainContent .card .name {\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n}\n\n#mainContent ul {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: auto;\n    margin: 0 10px;\n}\n#mainContent .card input[type="text"] {\n    background: transparent;\n    border: none;\n    width: 100%;\n    color: var(--text);\n    padding: 5px;\n}\n#mainContent .card .parentHoverButton {\n    padding: 5px;\n    margin: 0;\n    width: 2rem;\n    background-color: transparent;\n    height: 100%;\n    filter: opacity(0);\n}\n#mainContent .card li:hover .parentHoverButton {\n    filter: opacity(1) invert(1) brightness(80%);\n}\n#mainContent .card li:hover {\n    border-top: 2px solid var(--border);\n    border-bottom: 2px solid var(--border);\n}\n',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAIA;IACI,iBAAiB;IACjB,eAAe;IACf,aAAa;IACb,+BAA+B;IAC/B,iCAAiC;IACjC,kBAAkB;AACtB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;AACA;IACI,qBAAqB;IACrB,aAAa;IACb,mBAAmB;IACnB,6BAA6B;AACjC;AACA;IACI,0BAA0B;IAC1B,sCAAsC;IACtC,iBAAiB;IACjB,WAAW;IACX,aAAa;AACjB;AACA;IACI,cAAc;IACd,cAAc;IACd,yBAAyB;IACzB,qCAAqC;IACrC,aAAa;AACjB;AACA;IACI,cAAc;;IAEd,OAAO;IACP,aAAa;IACb,yBAAyB;IACzB,aAAa;IACb,2DAA2D;IAC3D,SAAS;IACT,qBAAqB;AACzB;AACA;IACI,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,2BAA2B;IAC3B,+BAA+B;IAC/B,mBAAmB;IACnB,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,sBAAsB;IACtB,8BAA8B;IAC9B,WAAW;IACX,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,WAAW;IACX,cAAc;AAClB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;IACX,cAAc;AAClB;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,YAAY;IACZ,SAAS;IACT,WAAW;IACX,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;AACtB;AACA;IACI,4CAA4C;AAChD;AACA;IACI,mCAAmC;IACnC,sCAAsC;AAC1C",sourcesContent:['@import url(./equalize.css);\n@import url(./scrollbar.css);\n@import url(./variables.css);\n\nbody {\n    min-height: 100vh;\n    background: red;\n    display: grid;\n    grid-template-columns: 20vw 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    border: 2px solid transparent;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    max-width: 30rem;\n}\n#mainContent .card .name {\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n}\n\n#mainContent ul {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: auto;\n    margin: 0 10px;\n}\n#mainContent .card input[type="text"] {\n    background: transparent;\n    border: none;\n    width: 100%;\n    color: var(--text);\n    padding: 5px;\n}\n#mainContent .card .parentHoverButton {\n    padding: 5px;\n    margin: 0;\n    width: 2rem;\n    background-color: transparent;\n    height: 100%;\n    filter: opacity(0);\n}\n#mainContent .card li:hover .parentHoverButton {\n    filter: opacity(1) invert(1) brightness(80%);\n}\n#mainContent .card li:hover {\n    border-top: 2px solid var(--border);\n    border-bottom: 2px solid var(--border);\n}\n'],sourceRoot:""}]);const l=A},728:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,gBAAgB;AACpB",sourcesContent:[":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);r&&o[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var d=n[s],c=r.base?d[0]+r.base:d[0],A=i[c]||0,l="".concat(c," ").concat(A);i[c]=A+1;var u=e(l),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=a(p,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:m,references:1})}o.push(l)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);t[s].references--}for(var d=r(n,a),c=0;c<i.length;c++){var A=e(i[c]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=d}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!n;)n=r[a--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{const n={Pubsub:{},on:function(n,t){this.Pubsub[n]=this.Pubsub[n]||[],this.Pubsub[n].push(t)},off:function(n,t){if(this.Pubsub[n])for(var e=0;e<this.Pubsub[n].length;e++)if(this.Pubsub[n][e]===t){this.Pubsub[n].splice(e,1);break}},emit:function(n,t){this.Pubsub[n]&&this.Pubsub[n].forEach((function(n){n(t)}))}};class t{#n;#t;#e;constructor(n,t){this.#n=n,this.#t=t,this.#e=void 0}get name(){return this.#n}set name(n){this.#n=n}get isDone(){return this.#t}set isDone(n){this.#t=n}get dueDate(){return this.#e}set dueDate(n){this.#e=n}get parse(){return{name:this.#n,isDone:this.#t,dueDate:this.#e}}}class r{#r;#n;#a={};constructor(n,e,r){if(this.#r=n,this.#n=e,r)for(const n in r)this.#a[n]=new t(r[n].name,r[n].isDone)}get tasks(){return this.#a}set tasks(n){}get name(){return this.#n}set name(n){this.#n=n}get id(){return this.#r}get parse(){let n={};for(const t in this.#a)n[t]=this.#a[t].parse;return{name:this.#n,tasks:n}}}class a{static#i=[];static#o=[];static populate(){this.#i.push(new r(this.#i.length,"Default List",{0:{name:"dsa",isDone:!0},1:{name:"test",isDone:!1}}))}static createList(){this.#i.push(new r(this.#i.length,"New List",{}))}static clear(){localStorage.clear()}static save(){localStorage.clear(),this.#i.forEach(((n,t)=>{localStorage.setItem(t,JSON.stringify(n.parse)),localStorage.getItem(t)}))}static load(){console.log("loading"),console.log(localStorage),this.#i=[];for(let n=0;n<localStorage.length;n++){const t=JSON.parse(localStorage[n]);console.log(t),this.#i.push(new r(this.#i.length,t.name,t.tasks))}}static get listsStorage(){return this.#i}}var i=e(379),o=e.n(i),s=e(795),d=e.n(s),c=e(569),A=e.n(c),l=e(565),u=e.n(l),p=e(216),m=e.n(p),g=e(589),h=e.n(g),b=e(402),C={};C.styleTagTransform=h(),C.setAttributes=u(),C.insert=A().bind(null,"head"),C.domAPI=d(),C.insertStyleElement=m(),o()(b.Z,C),b.Z&&b.Z.locals&&b.Z.locals;const v=e.p+"97d4c0a10ac97607dc65.svg";class f{#s;#d;constructor(n){return this.#d=n,this.#c(),this.#A(),this.#s}#c(){const n=document.createElement("div");n.classList.add("card"),n.innerHTML=`\n            <input class=name type='text' value='${this.#d.name}'>\n            <ul>\n            </ul>\n            <progress></progress>\n        `;const t=this.#d.tasks;let e=0;const r=n.querySelector("ul");for(const n in t){const a=document.createElement("li"),i=document.createElement("input");i.type="checkbox",i.checked=t[n].isDone,i.checked&&(e+=1),i.setAttribute("data-taskid",n),a.appendChild(i);const o=document.createElement("input");o.classList.add("task"),o.type="text",o.setAttribute("data-taskid",n),o.value=t[n].name,a.appendChild(o);const s=document.createElement("img");s.src=v,s.classList="parentHoverButton",s.setAttribute("data-taskid",n),a.appendChild(s),r.appendChild(a)}const a=document.createElement("li"),i=document.createElement("input");i.type="text",i.classList.add("newTask"),i.placeholder="Add new task",i.innerText="";const o=document.createElement("input");o.type="checkbox",o.disabled=!0,a.appendChild(o),a.appendChild(i),r.appendChild(a);const s=n.querySelector("progress");s.max=Object.keys(t).length,s.value=e,this.#s=n}#A(){this.#s.querySelector(".name").addEventListener("change",(t=>{t.preventDefault(),this.#d.name=t.target.value,n.emit("reloadPage")})),this.#s.querySelectorAll('input[type="checkbox"]').forEach((t=>{t.addEventListener("click",(t=>{const e=t.target.getAttribute("data-taskid");this.#d.tasks[e].isDone=t.target.checked,n.emit("reloadPage")}))})),this.#s.querySelectorAll(".task").forEach((t=>{t.addEventListener("change",(t=>{const e=t.target.getAttribute("data-taskid");this.#d.tasks[e].name=t.target.value,n.emit("reloadPage")}))})),this.#s.querySelector(".newTask").addEventListener("change",(e=>{const r=Object.keys(this.#d.tasks).length;this.#d.tasks[r]=new t(e.target.value,!1),n.emit("reloadPage")})),this.#s.querySelectorAll(".parentHoverButton").forEach((t=>{t.addEventListener("click",(t=>{delete this.#d.tasks[t.target.getAttribute("data-taskid")],n.emit("reloadPage")}))}))}}class B{static loadPage(){this.body=document.querySelector("body"),this.body.innerHTML="",this.#l(),this.#u(),this.renderLists()}static#u(){const n=document.createElement("div");n.innerHTML="\n            <h2>Dashboard</h2>\n        ",n.id="leftPanel",this.body.appendChild(n)}static#l(){const n=document.createElement("div");n.innerHTML="DewDew.it",n.id="nav",this.body.appendChild(n)}static renderLists(){const t=document.createElement("div");t.id="mainButtons",this.body.appendChild(t);const e=document.createElement("button");e.innerText="New List",t.appendChild(e),e.addEventListener("click",(t=>{n.emit("newList"),n.emit("reloadPage")}));const r=document.createElement("div");r.id="mainContent",this.body.appendChild(r),a.listsStorage.forEach((n=>{r.appendChild(new f(n))}))}static#p(){const n=document.createElement("div");n.id="mainButtons",this.body.appendChild(n);const t=document.createElement("button");t.innerText="New Project",n.appendChild(t),t.addEventListener("click",(n=>{this.#m()}));const e=document.createElement("div");e.id="mainContent",this.body.appendChild(e),e.innerHTML='\n                    <div class="content">\n                        <div class="card">\n                            <div class="name">Project 1</div>\n                            <div class="description">\n                                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                                Suscipit, dolorem autem rem maiores sunt fugit! Magni\n                                consectetur tenetur placeat ipsam nesciunt beatae\n                                deserunt nisi aut.\n                            </div>\n\n                            <h2>Active Lists</h2>\n                            <ul>\n                                <li>List 1</li>\n                                <li>List 2</li>\n                                <li>List 3</li>\n                                <li>List 4</li>\n                            </ul>\n                            <div class="pending">3 pending tasks in 2 lists.</div>\n                            <progress max="100" value="70"></progress>\n                            <button>Go to project</button>\n                        </div>\n                    </div>'}static#g(){const n=document.createElement("div");n.id="mainButtons",this.body.appendChild(n);const t=document.createElement("button");t.innerText="New Project",n.appendChild(t),t.addEventListener("click",(n=>{this.#m()}))}static#m(){const n=document.createElement("div");n.classList.add("modal"),this.body.appendChild(n)}}a.populate(),class{static bindEvents(){n.on("save",(()=>{a.save()})),n.on("load",(()=>{a.load()})),n.on("reloadPage",(()=>{n.emit("save"),B.loadPage()})),n.on("newList",(()=>{a.createList(),B.loadPage()}))}}.bindEvents(),n.emit("load"),B.loadPage()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,