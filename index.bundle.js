(()=>{"use strict";var n={797:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap);"]),a.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n","",{version:3,sources:["webpack://./src/css/equalize.css"],names:[],mappings:"AACA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,iCAAiC;AACrC;AACA;;;;IAII,oBAAoB;IACpB,eAAe;AACnB;AACA;;;;IAII,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:["@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\");\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n}\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit;\n    font-size: 100%;\n}\ninput,\ntextarea,\nselect,\nbutton {\n    width: 150px;\n    box-sizing: border-box;\n}\n"],sourceRoot:""}]);const s=a},25:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"footer {\n    background: var(--bg-dark);\n    width: 100vw;\n    text-align: center;\n    border-top: 2px solid var(--border);\n}\nfooter a {\n    color: var(--text);\n}\n","",{version:3,sources:["webpack://./src/css/footer.css"],names:[],mappings:"AAAA;IACI,0BAA0B;IAC1B,YAAY;IACZ,kBAAkB;IAClB,mCAAmC;AACvC;AACA;IACI,kBAAkB;AACtB",sourcesContent:["footer {\n    background: var(--bg-dark);\n    width: 100vw;\n    text-align: center;\n    border-top: 2px solid var(--border);\n}\nfooter a {\n    color: var(--text);\n}\n"],sourceRoot:""}]);const s=a},195:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAAA;IACI,oCAAoC;AACxC;AACA;IACI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,0BAA0B;IAC1B,mDAAmD;AACvD;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[":root {\n    scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n    height: 12px;\n    width: 8px;\n    background: #000;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #acacac;\n    -webkit-border-radius: 1ex;\n    -webkit-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.75);\n}\n\n::-webkit-scrollbar-corner {\n    background: #000;\n}\n"],sourceRoot:""}]);const s=a},402:(n,t,e)=>{e.d(t,{Z:()=>u});var r=e(537),i=e.n(r),o=e(645),a=e.n(o),s=e(797),A=e(195),d=e(728),c=e(25),l=a()(i());l.i(s.Z),l.i(A.Z),l.i(d.Z),l.i(c.Z),l.push([n.id,'body {\n    min-height: 100vh;\n    background: var(--dark-bg);\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    border: 2px solid transparent;\n    transition: 200ms;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    font-size: 2rem;\n    font-weight: bold;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: flex-start;\n\n    width: 100%;\n    max-width: 50rem;\n}\n#mainContent .card #title {\n    display: flex;\n}\n#mainContent .card #title .parentHoverRemoveList {\n    padding: 5px;\n    flex: 0;\n    height: 3rem;\n    transition: 200ms;\n    filter: opacity(0);\n    border-radius: 50px;\n    margin-left: 10px;\n}\n#mainContent .card:hover .parentHoverRemoveList {\n    filter: opacity(1) invert(1) brightness(80%) !important;\n}\n#mainContent .card .parentHoverRemoveList:hover {\n    background: rgb(153, 120, 93);\n}\n#mainContent .card .name {\n    flex: 1;\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n}\n\n#mainContent ul {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: 1rem;\n    margin: 0 10px;\n    filter: saturate(0);\n}\n#mainContent .card input[type="text"] {\n    background: transparent;\n    border: none;\n    flex: 1;\n    color: var(--text);\n    padding: 5px;\n}\n#mainContent .card input.isDone {\n    text-decoration: line-through;\n    color: grey;\n}\n#mainContent .card .parentHoverRemoveTask {\n    padding: 5px;\n    margin: 0px;\n    background-color: transparent;\n    height: 2rem;\n    filter: opacity(0);\n    transition: 200ms;\n    margin-left: 10px;\n}\n#mainContent .card li:hover .parentHoverRemoveTask {\n    filter: opacity(1) invert(1) brightness(80%);\n}\n#mainContent .card li:hover {\n    border-top: 2px solid var(--border);\n    border-bottom: 2px solid var(--border);\n}\n#mainContent .card .parentHoverRemoveTask:hover {\n    background: rgb(153, 120, 93);\n    border-radius: 50px;\n}\n#mainContent .card .plusIcon {\n    height: 1rem;\n    margin: 0 10px;\n    filter: invert(1) brightness(70%);\n}\n@media (pointer: none), (pointer: coarse) {\n    #mainContent .card #title .parentHoverRemoveList {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    #mainContent .card .parentHoverRemoveTask {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    li:last-child {\n        border-bottom: none;\n    }\n    li {\n        border-bottom: 2px solid var(--border);\n    }\n}\n',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAKA;IACI,iBAAiB;IACjB,0BAA0B;IAC1B,aAAa;IACb,0BAA0B;IAC1B,iCAAiC;IACjC,kBAAkB;AACtB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;AACA;IACI,qBAAqB;IACrB,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,iBAAiB;AACrB;AACA;IACI,0BAA0B;IAC1B,sCAAsC;IACtC,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,cAAc;IACd,cAAc;IACd,yBAAyB;IACzB,qCAAqC;IACrC,aAAa;AACjB;AACA;IACI,cAAc;;IAEd,OAAO;IACP,aAAa;IACb,yBAAyB;IACzB,aAAa;IACb,2DAA2D;IAC3D,SAAS;IACT,qBAAqB;AACzB;AACA;IACI,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,2BAA2B;IAC3B,+BAA+B;IAC/B,mBAAmB;IACnB,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,sBAAsB;IACtB,2BAA2B;;IAE3B,WAAW;IACX,gBAAgB;AACpB;AACA;IACI,aAAa;AACjB;AACA;IACI,YAAY;IACZ,OAAO;IACP,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;AACrB;AACA;IACI,uDAAuD;AAC3D;AACA;IACI,6BAA6B;AACjC;AACA;IACI,OAAO;IACP,eAAe;IACf,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,WAAW;IACX,cAAc;AAClB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;IACX,cAAc;IACd,mBAAmB;AACvB;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,OAAO;IACP,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,6BAA6B;IAC7B,WAAW;AACf;AACA;IACI,YAAY;IACZ,WAAW;IACX,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;AACrB;AACA;IACI,4CAA4C;AAChD;AACA;IACI,mCAAmC;IACnC,sCAAsC;AAC1C;AACA;IACI,6BAA6B;IAC7B,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,cAAc;IACd,iCAAiC;AACrC;AACA;IACI;QACI,4CAA4C;IAChD;IACA;QACI,4CAA4C;IAChD;IACA;QACI,mBAAmB;IACvB;IACA;QACI,sCAAsC;IAC1C;AACJ",sourcesContent:['@import url(./equalize.css);\n@import url(./scrollbar.css);\n@import url(./variables.css);\n@import url(./footer.css);\n\nbody {\n    min-height: 100vh;\n    background: var(--dark-bg);\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 5rem 5rem 1fr;\n    color: var(--text);\n}\nbutton {\n    border-radius: 50px;\n    padding: 1rem;\n    cursor: pointer;\n}\nli {\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    border: 2px solid transparent;\n    transition: 200ms;\n}\n#nav {\n    background: var(--dark-bg);\n    border-bottom: 2px solid var(--border);\n    grid-column: 1/-1;\n    grid-row: 1;\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    font-size: 2rem;\n    font-weight: bold;\n}\n#leftPanel {\n    grid-row: 2/-1;\n    grid-column: 1;\n    background: var(--mid-bg);\n    border-right: 2px solid var(--border);\n    padding: 1rem;\n}\n#mainContent {\n    grid-row: 3/-1;\n\n    flex: 1;\n    padding: 1rem;\n    background: var(--mid-bg);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 1rem;\n    justify-items: center;\n}\n#mainButtons {\n    background: var(--mid-bg);\n    padding: 1rem;\n}\n\n#mainContent .card {\n    background: var(--light-bg);\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    padding: 1rem;\n    max-height: 50vh;\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    justify-content: flex-start;\n\n    width: 100%;\n    max-width: 50rem;\n}\n#mainContent .card #title {\n    display: flex;\n}\n#mainContent .card #title .parentHoverRemoveList {\n    padding: 5px;\n    flex: 0;\n    height: 3rem;\n    transition: 200ms;\n    filter: opacity(0);\n    border-radius: 50px;\n    margin-left: 10px;\n}\n#mainContent .card:hover .parentHoverRemoveList {\n    filter: opacity(1) invert(1) brightness(80%) !important;\n}\n#mainContent .card .parentHoverRemoveList:hover {\n    background: rgb(153, 120, 93);\n}\n#mainContent .card .name {\n    flex: 1;\n    font-size: 2rem;\n    font-weight: bold;\n    color: var(--text);\n}\n\n#mainContent ul {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n#mainContent .card progress {\n    width: 100%;\n    height: 1.5rem;\n}\n#mainContent .card button {\n    width: 100%;\n}\n#mainContent .card input[type="checkbox"] {\n    width: 1rem;\n    margin: 0 10px;\n    filter: saturate(0);\n}\n#mainContent .card input[type="text"] {\n    background: transparent;\n    border: none;\n    flex: 1;\n    color: var(--text);\n    padding: 5px;\n}\n#mainContent .card input.isDone {\n    text-decoration: line-through;\n    color: grey;\n}\n#mainContent .card .parentHoverRemoveTask {\n    padding: 5px;\n    margin: 0px;\n    background-color: transparent;\n    height: 2rem;\n    filter: opacity(0);\n    transition: 200ms;\n    margin-left: 10px;\n}\n#mainContent .card li:hover .parentHoverRemoveTask {\n    filter: opacity(1) invert(1) brightness(80%);\n}\n#mainContent .card li:hover {\n    border-top: 2px solid var(--border);\n    border-bottom: 2px solid var(--border);\n}\n#mainContent .card .parentHoverRemoveTask:hover {\n    background: rgb(153, 120, 93);\n    border-radius: 50px;\n}\n#mainContent .card .plusIcon {\n    height: 1rem;\n    margin: 0 10px;\n    filter: invert(1) brightness(70%);\n}\n@media (pointer: none), (pointer: coarse) {\n    #mainContent .card #title .parentHoverRemoveList {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    #mainContent .card .parentHoverRemoveTask {\n        filter: opacity(1) invert(1) brightness(80%);\n    }\n    li:last-child {\n        border-bottom: none;\n    }\n    li {\n        border-bottom: 2px solid var(--border);\n    }\n}\n'],sourceRoot:""}]);const u=l},728:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,gBAAgB;AACpB",sourcesContent:[":root {\n    --dark-bg: #111827;\n    --mid-bg: #151d2c;\n    --light-bg: #1f2937;\n    --border: #363f4b;\n    --text: #d1d5db;\n    --text2: #9c9fa4;\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(a[A]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},a=[],s=0;s<n.length;s++){var A=n[s],d=r.base?A[0]+r.base:A[0],c=o[d]||0,l="".concat(d," ").concat(c);o[d]=c+1;var u=e(l),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:m,references:1})}a.push(l)}return a}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=e(o[a]);t[s].references--}for(var A=r(n,i),d=0;d<o.length;d++){var c=e(o[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=A}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},655:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return n[r](o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!n;)n=r[i--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{const n={Pubsub:{},on:function(n,t){this.Pubsub[n]=this.Pubsub[n]||[],this.Pubsub[n].push(t)},off:function(n,t){if(this.Pubsub[n])for(var e=0;e<this.Pubsub[n].length;e++)if(this.Pubsub[n][e]===t){this.Pubsub[n].splice(e,1);break}},emit:function(n,t){this.Pubsub[n]&&this.Pubsub[n].forEach((function(n){n(t)}))}};class t{#n;#t;#e;constructor(n,t){this.#n=n,this.#t=t,this.#e=void 0}get name(){return this.#n}set name(n){this.#n=n}get isDone(){return this.#t}set isDone(n){this.#t=n}get dueDate(){return this.#e}set dueDate(n){this.#e=n}get parse(){return{name:this.#n,isDone:this.#t,dueDate:this.#e}}}class r{#r;#n;#i={};#o=[];constructor(n,e,r){if(this.#r=n,this.#n=e,r)for(const n in r)this.#i[n]=new t(r[n].name,r[n].isDone)}get tasks(){return this.#i}set tasks(n){}get name(){return this.#n}set name(n){this.#n=n}get id(){return this.#r}get parse(){let n={};for(const t in this.#i)n[t]=this.#i[t].parse;return{id:this.#r,name:this.#n,tasks:n}}}class i{static#a={};static save(){localStorage.clear();const n=[];for(const t in this.#a)n.push([t,this.#a[t].parse]);const t=new Map(n);localStorage.setItem("data",JSON.stringify(Array.from(t.entries())))}static load(){this.#a={};const n=JSON.parse(localStorage.getItem("data"));n&&n.forEach((n=>{const t=n[0],e=n[1];this.#a[t]=new r(t,e.name,e.tasks)}))}static get listsStorage(){return this.#a}}var o=e(379),a=e.n(o),s=e(795),A=e.n(s),d=e(569),c=e.n(d),l=e(565),u=e.n(l),p=e(216),m=e.n(p),C=e(655),h=e.n(C),g=e(402),b={};b.styleTagTransform=h(),b.setAttributes=u(),b.insert=c().bind(null,"head"),b.domAPI=A(),b.insertStyleElement=m(),a()(g.Z,b),g.Z&&g.Z.locals&&g.Z.locals;class v{#s;constructor(){this.#s=this.#A(),this.#d()}#A(){const n=document.createElement("div");return n.innerHTML="DewDew.it",n.id="nav",n}#d(){}get output(){return this.#s}}class f{#s;constructor(){this.#s=this.#A(),this.#d()}#A(){const n=document.createElement("div");n.id="mainButtons";const t=document.createElement("button");return t.id="btnNewList",t.innerText="New List",n.appendChild(t),n}#d(){this.#s.querySelector("#btnNewList").addEventListener("click",(()=>{n.emit("newList")}))}get output(){return this.#s}}const I=e.p+"97d4c0a10ac97607dc65.svg",B=e.p+"3cffe9a515498593b872.svg";class x{#c;#s;constructor(n){this.#c=n,this.#s=this.#A(),this.#d()}#A(){const n=document.createElement("input");return n.type="text",n.classList.add("name"),n.value=this.#c.name,n}#d(){const t=this.#s;t.addEventListener("click",(n=>{n.target.select()})),t.addEventListener("change",(t=>{t.preventDefault(),n.emit("updateListName",{id:this.#c.id,newName:t.target.value}),n.emit("reloadPage")}))}get output(){return this.#s}}class y{#c;#s;constructor(n){this.#c=n,this.#s=this.#A(),this.#d()}#A(){const n=document.createElement("img");return n.src=I,n.classList.add("parentHoverRemoveList"),n}#d(){this.#s.addEventListener("click",(()=>{n.emit("removeList",this.#c),n.emit("reloadPage")}))}get output(){return this.#s}}class k{#c;#s;constructor(n){this.#c=n,this.#s=this.#A(),this.#d()}#A(){const n=this.#c.tasks,t=document.createElement("ul");for(const e in n){const r=document.createElement("li"),i=document.createElement("input");i.type="checkbox",i.checked=n[e].isDone,i.setAttribute("data-taskid",e),r.appendChild(i);const o=document.createElement("input");o.classList.add("task"),o.type="text",o.setAttribute("data-taskid",e),o.value=n[e].name,n[e].isDone&&o.classList.add("isDone"),r.appendChild(o);const a=document.createElement("img");a.src=I,a.classList="parentHoverRemoveTask",a.setAttribute("data-taskid",e),r.appendChild(a),t.appendChild(r)}const e=document.createElement("li"),r=document.createElement("input");r.type="text",r.classList.add("newTask"),r.placeholder="Add new task",r.innerText="";const i=document.createElement("img");return i.src=B,i.classList.add("plusIcon"),e.appendChild(i),e.appendChild(r),t.appendChild(e),t}#d(){this.#s.querySelectorAll('input[type="checkbox"]').forEach((t=>{t.addEventListener("click",(t=>{const e=this.#c.id,r=t.target.getAttribute("data-taskid"),i=t.target.checked;n.emit("updateIsDone",{listID:e,taskID:r,newIsDone:i}),n.emit("reloadPage")}))})),this.#s.querySelectorAll(".task").forEach((t=>{t.addEventListener("change",(t=>{const e=t.target.getAttribute("data-taskid");this.#c.tasks[e].name=t.target.value,n.emit("reloadPage")}))})),this.#s.querySelector(".newTask").addEventListener("change",(t=>{const e=t.target.value,r=this.#c.id;n.emit("newTask",{name:e,isDone:!1,listID:r}),n.emit("reloadPage")})),this.#s.querySelectorAll(".parentHoverRemoveTask").forEach((t=>{t.addEventListener("click",(t=>{delete this.#c.tasks[t.target.getAttribute("data-taskid")],n.emit("reloadPage")}))}))}get output(){return this.#s}}class w{#l;#c;color;constructor(n){return this.#c=n,this.color={h:255*n.id,s:70,l:70},this.#A(),this.#d(),this.#l}#A(){const n=document.createElement("div");n.classList.add("card"),n.style.borderTop=`20px solid hsl(\n            ${this.color.h},\n            ${this.color.s}%,\n            ${this.color.l}%)`,n.innerHTML="\n            <div id='title'></div>\n        ",n.querySelector("#title").appendChild(new x(this.#c).output),n.querySelector("#title").appendChild(new y(this.#c).output),n.appendChild(new k(this.#c).output),this.#l=n}#d(){}}class E{#s;constructor(){this.#s=this.#A(),this.#d()}#A(){const n=document.createElement("div");n.id="mainContent";const t=i.listsStorage;for(const e in t)n.appendChild(new w(t[e]));return n}#d(){}get output(){return this.#s}}class D{#u;#s;constructor(n){this.#u=n,this.#s=this.#A(),this.#d()}#A(){let n,t=(new Date).getFullYear();const e=this.#u.toString();n=e,e.includes(t)||(n=n+"-"+t+" - ");const r=document.createElement("footer");return r.innerHTML=`\n    <small>\n        &copy; Copyright ${n}\n        <a href="https://github.com/porkenvolf" target="”_blank”">\n            Porkenvölf\n        </a>\n    </small>\n    `,r.style.display="flex",r.style.justifyContent="center",r.style.alignItems="center",r.style.height="3rem",r}#d(){}get output(){return this.#s}}class S{static loadPage(){this.body=document.querySelector("body"),this.body.innerHTML="",this.body.appendChild((new v).output),this.body.appendChild((new f).output),this.body.appendChild((new E).output),this.body.appendChild(new D(2023).output)}}(class{static bindEvents(){n.on("save",(()=>{i.save()})),n.on("load",(()=>{i.load()})),n.on("reloadPage",(()=>{S.loadPage(),n.emit("save")})),n.on("newList",(()=>{const t=Math.random().toFixed(5),e=new r(t,"New List",{});i.listsStorage[t]=e,n.emit("reloadPage")})),n.on("removeList",(t=>{delete i.listsStorage[t.id],n.emit("reloadPage")})),n.on("updateListName",(n=>{const t=n.id,e=n.newName;i.listsStorage[t].name=e})),n.on("newTask",(n=>{const e=n.name,r=n.isDone,o=n.listID,a=Math.random(),s=new t(e,r);i.listsStorage[o].tasks[a]=s})),n.on("updateIsDone",(n=>{const t=n.listID,e=n.taskID,r=n.newIsDone;i.listsStorage[t].tasks[e].isDone=r}))}}).bindEvents(),n.emit("load"),S.loadPage()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TXdLLEVBQVN4SyxFQUFLd0ssT0FDZEMsRUFBU3pLLEVBQUt5SyxPQUNkRSxFQUFZM0ssRUFBSzJLLFVBQ3ZCcEQsRUFBUWUsYUFBYWtDLEdBQVFuRCxNQUFNb0QsR0FBUTNELE9BQVM2RCxDQUFTLEdBRXJFLElDcERZMkIsYUFFaEIsRUFBTy9GLEtBQUssUUFDWjRGLEVBQUdDLFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9zcmMvY3NzL2VxdWFsaXplLmNzcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9zcmMvY3NzL2Zvb3Rlci5jc3MiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL2Nzcy9zY3JvbGxiYXIuY3NzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9jc3Mvc3R5bGUuY3NzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9jc3MvdmFyaWFibGVzLmNzcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvcC10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3RvcC10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvcC10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9QdWJzdWIuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL1Rhc2suanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL0xpc3QuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL1N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL2Nzcy9zdHlsZS5jc3M/OWZjZCIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9OYXZCYXIuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvTWVudUJhci5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9zcmMvVUlfTGlzdC5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9NYWluQ29udGVudC5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL1VJLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9FdmVudHNJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvOndnaHRAMzAwOzQwMDs1MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBmb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XG59XG5idXR0b24sXG5pbnB1dCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgICBmb250LXNpemU6IDEwMCU7XG59XG5pbnB1dCxcbnRleHRhcmVhLFxuc2VsZWN0LFxuYnV0dG9uIHtcbiAgICB3aWR0aDogMTUwcHg7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9lcXVhbGl6ZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0E7SUFDSSxTQUFTO0lBQ1QsVUFBVTtJQUNWLHNCQUFzQjtJQUN0QixpQ0FBaUM7QUFDckM7QUFDQTs7OztJQUlJLG9CQUFvQjtJQUNwQixlQUFlO0FBQ25CO0FBQ0E7Ozs7SUFJSSxZQUFZO0lBQ1osc0JBQXNCO0FBQzFCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs0MDA7NTAwOzcwMCZkaXNwbGF5PXN3YXBcXFwiKTtcXG4qIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBmb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XFxufVxcbmJ1dHRvbixcXG5pbnB1dCxcXG5zZWxlY3QsXFxudGV4dGFyZWEge1xcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gICAgZm9udC1zaXplOiAxMDAlO1xcbn1cXG5pbnB1dCxcXG50ZXh0YXJlYSxcXG5zZWxlY3QsXFxuYnV0dG9uIHtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGZvb3RlciB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tYmctZGFyayk7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBib3JkZXItdG9wOiAycHggc29saWQgdmFyKC0tYm9yZGVyKTtcbn1cbmZvb3RlciBhIHtcbiAgICBjb2xvcjogdmFyKC0tdGV4dCk7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvZm9vdGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLDBCQUEwQjtJQUMxQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLG1DQUFtQztBQUN2QztBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImZvb3RlciB7XFxuICAgIGJhY2tncm91bmQ6IHZhcigtLWJnLWRhcmspO1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLWJvcmRlcik7XFxufVxcbmZvb3RlciBhIHtcXG4gICAgY29sb3I6IHZhcigtLXRleHQpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290IHtcbiAgICBzY3JvbGxiYXItY29sb3I6ICNhY2FjYWMgdHJhbnNwYXJlbnQ7XG59XG46Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICBoZWlnaHQ6IDEycHg7XG4gICAgd2lkdGg6IDhweDtcbiAgICBiYWNrZ3JvdW5kOiAjMDAwO1xufVxuXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICBiYWNrZ3JvdW5kOiAjYWNhY2FjO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMWV4O1xuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMHB4IDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjc1KTtcbn1cblxuOjotd2Via2l0LXNjcm9sbGJhci1jb3JuZXIge1xuICAgIGJhY2tncm91bmQ6ICMwMDA7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc2Nyb2xsYmFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLG9DQUFvQztBQUN4QztBQUNBO0lBQ0ksWUFBWTtJQUNaLFVBQVU7SUFDVixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsMEJBQTBCO0lBQzFCLG1EQUFtRDtBQUN2RDs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAgIHNjcm9sbGJhci1jb2xvcjogI2FjYWNhYyB0cmFuc3BhcmVudDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICAgIGhlaWdodDogMTJweDtcXG4gICAgd2lkdGg6IDhweDtcXG4gICAgYmFja2dyb3VuZDogIzAwMDtcXG59XFxuXFxuOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XFxuICAgIGJhY2tncm91bmQ6ICNhY2FjYWM7XFxuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMWV4O1xcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDBweCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC43NSk7XFxufVxcblxcbjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHtcXG4gICAgYmFja2dyb3VuZDogIzAwMDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2VxdWFsaXplLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Njcm9sbGJhci5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzJfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92YXJpYWJsZXMuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8zX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9vdGVyLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzJfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzNfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBib2R5IHtcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1kYXJrLWJnKTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogNXJlbSA1cmVtIDFmcjtcbiAgICBjb2xvcjogdmFyKC0tdGV4dCk7XG59XG5idXR0b24ge1xuICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5saSB7XG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICB0cmFuc2l0aW9uOiAyMDBtcztcbn1cbiNuYXYge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWRhcmstYmcpO1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1ib3JkZXIpO1xuICAgIGdyaWQtY29sdW1uOiAxLy0xO1xuICAgIGdyaWQtcm93OiAxO1xuICAgIHBhZGRpbmc6IDFyZW07XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cbiNsZWZ0UGFuZWwge1xuICAgIGdyaWQtcm93OiAyLy0xO1xuICAgIGdyaWQtY29sdW1uOiAxO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW1pZC1iZyk7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgdmFyKC0tYm9yZGVyKTtcbiAgICBwYWRkaW5nOiAxcmVtO1xufVxuI21haW5Db250ZW50IHtcbiAgICBncmlkLXJvdzogMy8tMTtcblxuICAgIGZsZXg6IDE7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1taWQtYmcpO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgzNTBweCwgMWZyKSk7XG4gICAgZ2FwOiAxcmVtO1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbn1cbiNtYWluQnV0dG9ucyB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tbWlkLWJnKTtcbiAgICBwYWRkaW5nOiAxcmVtO1xufVxuXG4jbWFpbkNvbnRlbnQgLmNhcmQge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWxpZ2h0LWJnKTtcbiAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1ib3JkZXIpO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICBtYXgtaGVpZ2h0OiA1MHZoO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ2FwOiAxcmVtO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWF4LXdpZHRoOiA1MHJlbTtcbn1cbiNtYWluQ29udGVudCAuY2FyZCAjdGl0bGUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG4jbWFpbkNvbnRlbnQgLmNhcmQgI3RpdGxlIC5wYXJlbnRIb3ZlclJlbW92ZUxpc3Qge1xuICAgIHBhZGRpbmc6IDVweDtcbiAgICBmbGV4OiAwO1xuICAgIGhlaWdodDogM3JlbTtcbiAgICB0cmFuc2l0aW9uOiAyMDBtcztcbiAgICBmaWx0ZXI6IG9wYWNpdHkoMCk7XG4gICAgYm9yZGVyLXJhZGl1czogNTBweDtcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcbn1cbiNtYWluQ29udGVudCAuY2FyZDpob3ZlciAucGFyZW50SG92ZXJSZW1vdmVMaXN0IHtcbiAgICBmaWx0ZXI6IG9wYWNpdHkoMSkgaW52ZXJ0KDEpIGJyaWdodG5lc3MoODAlKSAhaW1wb3J0YW50O1xufVxuI21haW5Db250ZW50IC5jYXJkIC5wYXJlbnRIb3ZlclJlbW92ZUxpc3Q6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHJnYigxNTMsIDEyMCwgOTMpO1xufVxuI21haW5Db250ZW50IC5jYXJkIC5uYW1lIHtcbiAgICBmbGV4OiAxO1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBjb2xvcjogdmFyKC0tdGV4dCk7XG59XG5cbiNtYWluQ29udGVudCB1bCB7XG4gICAgZmxleDogMTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG4jbWFpbkNvbnRlbnQgLmNhcmQgcHJvZ3Jlc3Mge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMS41cmVtO1xufVxuI21haW5Db250ZW50IC5jYXJkIGJ1dHRvbiB7XG4gICAgd2lkdGg6IDEwMCU7XG59XG4jbWFpbkNvbnRlbnQgLmNhcmQgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdIHtcbiAgICB3aWR0aDogMXJlbTtcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgICBmaWx0ZXI6IHNhdHVyYXRlKDApO1xufVxuI21haW5Db250ZW50IC5jYXJkIGlucHV0W3R5cGU9XCJ0ZXh0XCJdIHtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgZmxleDogMTtcbiAgICBjb2xvcjogdmFyKC0tdGV4dCk7XG4gICAgcGFkZGluZzogNXB4O1xufVxuI21haW5Db250ZW50IC5jYXJkIGlucHV0LmlzRG9uZSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgY29sb3I6IGdyZXk7XG59XG4jbWFpbkNvbnRlbnQgLmNhcmQgLnBhcmVudEhvdmVyUmVtb3ZlVGFzayB7XG4gICAgcGFkZGluZzogNXB4O1xuICAgIG1hcmdpbjogMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGhlaWdodDogMnJlbTtcbiAgICBmaWx0ZXI6IG9wYWNpdHkoMCk7XG4gICAgdHJhbnNpdGlvbjogMjAwbXM7XG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG59XG4jbWFpbkNvbnRlbnQgLmNhcmQgbGk6aG92ZXIgLnBhcmVudEhvdmVyUmVtb3ZlVGFzayB7XG4gICAgZmlsdGVyOiBvcGFjaXR5KDEpIGludmVydCgxKSBicmlnaHRuZXNzKDgwJSk7XG59XG4jbWFpbkNvbnRlbnQgLmNhcmQgbGk6aG92ZXIge1xuICAgIGJvcmRlci10b3A6IDJweCBzb2xpZCB2YXIoLS1ib3JkZXIpO1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1ib3JkZXIpO1xufVxuI21haW5Db250ZW50IC5jYXJkIC5wYXJlbnRIb3ZlclJlbW92ZVRhc2s6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHJnYigxNTMsIDEyMCwgOTMpO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XG59XG4jbWFpbkNvbnRlbnQgLmNhcmQgLnBsdXNJY29uIHtcbiAgICBoZWlnaHQ6IDFyZW07XG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gICAgZmlsdGVyOiBpbnZlcnQoMSkgYnJpZ2h0bmVzcyg3MCUpO1xufVxuQG1lZGlhIChwb2ludGVyOiBub25lKSwgKHBvaW50ZXI6IGNvYXJzZSkge1xuICAgICNtYWluQ29udGVudCAuY2FyZCAjdGl0bGUgLnBhcmVudEhvdmVyUmVtb3ZlTGlzdCB7XG4gICAgICAgIGZpbHRlcjogb3BhY2l0eSgxKSBpbnZlcnQoMSkgYnJpZ2h0bmVzcyg4MCUpO1xuICAgIH1cbiAgICAjbWFpbkNvbnRlbnQgLmNhcmQgLnBhcmVudEhvdmVyUmVtb3ZlVGFzayB7XG4gICAgICAgIGZpbHRlcjogb3BhY2l0eSgxKSBpbnZlcnQoMSkgYnJpZ2h0bmVzcyg4MCUpO1xuICAgIH1cbiAgICBsaTpsYXN0LWNoaWxkIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICB9XG4gICAgbGkge1xuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tYm9yZGVyKTtcbiAgICB9XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUtBO0lBQ0ksaUJBQWlCO0lBQ2pCLDBCQUEwQjtJQUMxQixhQUFhO0lBQ2IsMEJBQTBCO0lBQzFCLGlDQUFpQztJQUNqQyxrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsZUFBZTtBQUNuQjtBQUNBO0lBQ0kscUJBQXFCO0lBQ3JCLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksMEJBQTBCO0lBQzFCLHNDQUFzQztJQUN0QyxpQkFBaUI7SUFDakIsV0FBVztJQUNYLGFBQWE7SUFDYixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGNBQWM7SUFDZCxjQUFjO0lBQ2QseUJBQXlCO0lBQ3pCLHFDQUFxQztJQUNyQyxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxjQUFjOztJQUVkLE9BQU87SUFDUCxhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCLGFBQWE7SUFDYiwyREFBMkQ7SUFDM0QsU0FBUztJQUNULHFCQUFxQjtBQUN6QjtBQUNBO0lBQ0kseUJBQXlCO0lBQ3pCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSwyQkFBMkI7SUFDM0IsK0JBQStCO0lBQy9CLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixTQUFTO0lBQ1Qsc0JBQXNCO0lBQ3RCLDJCQUEyQjs7SUFFM0IsV0FBVztJQUNYLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksYUFBYTtBQUNqQjtBQUNBO0lBQ0ksWUFBWTtJQUNaLE9BQU87SUFDUCxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSx1REFBdUQ7QUFDM0Q7QUFDQTtJQUNJLDZCQUE2QjtBQUNqQztBQUNBO0lBQ0ksT0FBTztJQUNQLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksT0FBTztJQUNQLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7QUFDQTtJQUNJLFdBQVc7SUFDWCxjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7QUFDQTtJQUNJLFdBQVc7SUFDWCxjQUFjO0lBQ2QsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSx1QkFBdUI7SUFDdkIsWUFBWTtJQUNaLE9BQU87SUFDUCxrQkFBa0I7SUFDbEIsWUFBWTtBQUNoQjtBQUNBO0lBQ0ksNkJBQTZCO0lBQzdCLFdBQVc7QUFDZjtBQUNBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7SUFDWCw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSw0Q0FBNEM7QUFDaEQ7QUFDQTtJQUNJLG1DQUFtQztJQUNuQyxzQ0FBc0M7QUFDMUM7QUFDQTtJQUNJLDZCQUE2QjtJQUM3QixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLFlBQVk7SUFDWixjQUFjO0lBQ2QsaUNBQWlDO0FBQ3JDO0FBQ0E7SUFDSTtRQUNJLDRDQUE0QztJQUNoRDtJQUNBO1FBQ0ksNENBQTRDO0lBQ2hEO0lBQ0E7UUFDSSxtQkFBbUI7SUFDdkI7SUFDQTtRQUNJLHNDQUFzQztJQUMxQztBQUNKXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKC4vZXF1YWxpemUuY3NzKTtcXG5AaW1wb3J0IHVybCguL3Njcm9sbGJhci5jc3MpO1xcbkBpbXBvcnQgdXJsKC4vdmFyaWFibGVzLmNzcyk7XFxuQGltcG9ydCB1cmwoLi9mb290ZXIuY3NzKTtcXG5cXG5ib2R5IHtcXG4gICAgbWluLWhlaWdodDogMTAwdmg7XFxuICAgIGJhY2tncm91bmQ6IHZhcigtLWRhcmstYmcpO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA1cmVtIDVyZW0gMWZyO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dCk7XFxufVxcbmJ1dHRvbiB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XFxuICAgIHBhZGRpbmc6IDFyZW07XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxubGkge1xcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICB0cmFuc2l0aW9uOiAyMDBtcztcXG59XFxuI25hdiB7XFxuICAgIGJhY2tncm91bmQ6IHZhcigtLWRhcmstYmcpO1xcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tYm9yZGVyKTtcXG4gICAgZ3JpZC1jb2x1bW46IDEvLTE7XFxuICAgIGdyaWQtcm93OiAxO1xcbiAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDJyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG4jbGVmdFBhbmVsIHtcXG4gICAgZ3JpZC1yb3c6IDIvLTE7XFxuICAgIGdyaWQtY29sdW1uOiAxO1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1taWQtYmcpO1xcbiAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCB2YXIoLS1ib3JkZXIpO1xcbiAgICBwYWRkaW5nOiAxcmVtO1xcbn1cXG4jbWFpbkNvbnRlbnQge1xcbiAgICBncmlkLXJvdzogMy8tMTtcXG5cXG4gICAgZmxleDogMTtcXG4gICAgcGFkZGluZzogMXJlbTtcXG4gICAgYmFja2dyb3VuZDogdmFyKC0tbWlkLWJnKTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgzNTBweCwgMWZyKSk7XFxuICAgIGdhcDogMXJlbTtcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbn1cXG4jbWFpbkJ1dHRvbnMge1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1taWQtYmcpO1xcbiAgICBwYWRkaW5nOiAxcmVtO1xcbn1cXG5cXG4jbWFpbkNvbnRlbnQgLmNhcmQge1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1saWdodC1iZyk7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWJvcmRlcik7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIHBhZGRpbmc6IDFyZW07XFxuICAgIG1heC1oZWlnaHQ6IDUwdmg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGdhcDogMXJlbTtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcblxcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWF4LXdpZHRoOiA1MHJlbTtcXG59XFxuI21haW5Db250ZW50IC5jYXJkICN0aXRsZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcbiNtYWluQ29udGVudCAuY2FyZCAjdGl0bGUgLnBhcmVudEhvdmVyUmVtb3ZlTGlzdCB7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgZmxleDogMDtcXG4gICAgaGVpZ2h0OiAzcmVtO1xcbiAgICB0cmFuc2l0aW9uOiAyMDBtcztcXG4gICAgZmlsdGVyOiBvcGFjaXR5KDApO1xcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcXG59XFxuI21haW5Db250ZW50IC5jYXJkOmhvdmVyIC5wYXJlbnRIb3ZlclJlbW92ZUxpc3Qge1xcbiAgICBmaWx0ZXI6IG9wYWNpdHkoMSkgaW52ZXJ0KDEpIGJyaWdodG5lc3MoODAlKSAhaW1wb3J0YW50O1xcbn1cXG4jbWFpbkNvbnRlbnQgLmNhcmQgLnBhcmVudEhvdmVyUmVtb3ZlTGlzdDpob3ZlciB7XFxuICAgIGJhY2tncm91bmQ6IHJnYigxNTMsIDEyMCwgOTMpO1xcbn1cXG4jbWFpbkNvbnRlbnQgLmNhcmQgLm5hbWUge1xcbiAgICBmbGV4OiAxO1xcbiAgICBmb250LXNpemU6IDJyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dCk7XFxufVxcblxcbiNtYWluQ29udGVudCB1bCB7XFxuICAgIGZsZXg6IDE7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbiNtYWluQ29udGVudCAuY2FyZCBwcm9ncmVzcyB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEuNXJlbTtcXG59XFxuI21haW5Db250ZW50IC5jYXJkIGJ1dHRvbiB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbn1cXG4jbWFpbkNvbnRlbnQgLmNhcmQgaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICAgIHdpZHRoOiAxcmVtO1xcbiAgICBtYXJnaW46IDAgMTBweDtcXG4gICAgZmlsdGVyOiBzYXR1cmF0ZSgwKTtcXG59XFxuI21haW5Db250ZW50IC5jYXJkIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSB7XFxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGZsZXg6IDE7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0KTtcXG4gICAgcGFkZGluZzogNXB4O1xcbn1cXG4jbWFpbkNvbnRlbnQgLmNhcmQgaW5wdXQuaXNEb25lIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxuICAgIGNvbG9yOiBncmV5O1xcbn1cXG4jbWFpbkNvbnRlbnQgLmNhcmQgLnBhcmVudEhvdmVyUmVtb3ZlVGFzayB7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgbWFyZ2luOiAwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBoZWlnaHQ6IDJyZW07XFxuICAgIGZpbHRlcjogb3BhY2l0eSgwKTtcXG4gICAgdHJhbnNpdGlvbjogMjAwbXM7XFxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbn1cXG4jbWFpbkNvbnRlbnQgLmNhcmQgbGk6aG92ZXIgLnBhcmVudEhvdmVyUmVtb3ZlVGFzayB7XFxuICAgIGZpbHRlcjogb3BhY2l0eSgxKSBpbnZlcnQoMSkgYnJpZ2h0bmVzcyg4MCUpO1xcbn1cXG4jbWFpbkNvbnRlbnQgLmNhcmQgbGk6aG92ZXIge1xcbiAgICBib3JkZXItdG9wOiAycHggc29saWQgdmFyKC0tYm9yZGVyKTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWJvcmRlcik7XFxufVxcbiNtYWluQ29udGVudCAuY2FyZCAucGFyZW50SG92ZXJSZW1vdmVUYXNrOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZDogcmdiKDE1MywgMTIwLCA5Myk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XFxufVxcbiNtYWluQ29udGVudCAuY2FyZCAucGx1c0ljb24ge1xcbiAgICBoZWlnaHQ6IDFyZW07XFxuICAgIG1hcmdpbjogMCAxMHB4O1xcbiAgICBmaWx0ZXI6IGludmVydCgxKSBicmlnaHRuZXNzKDcwJSk7XFxufVxcbkBtZWRpYSAocG9pbnRlcjogbm9uZSksIChwb2ludGVyOiBjb2Fyc2UpIHtcXG4gICAgI21haW5Db250ZW50IC5jYXJkICN0aXRsZSAucGFyZW50SG92ZXJSZW1vdmVMaXN0IHtcXG4gICAgICAgIGZpbHRlcjogb3BhY2l0eSgxKSBpbnZlcnQoMSkgYnJpZ2h0bmVzcyg4MCUpO1xcbiAgICB9XFxuICAgICNtYWluQ29udGVudCAuY2FyZCAucGFyZW50SG92ZXJSZW1vdmVUYXNrIHtcXG4gICAgICAgIGZpbHRlcjogb3BhY2l0eSgxKSBpbnZlcnQoMSkgYnJpZ2h0bmVzcyg4MCUpO1xcbiAgICB9XFxuICAgIGxpOmxhc3QtY2hpbGQge1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXG4gICAgfVxcbiAgICBsaSB7XFxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tYm9yZGVyKTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290IHtcbiAgICAtLWRhcmstYmc6ICMxMTE4Mjc7XG4gICAgLS1taWQtYmc6ICMxNTFkMmM7XG4gICAgLS1saWdodC1iZzogIzFmMjkzNztcbiAgICAtLWJvcmRlcjogIzM2M2Y0YjtcbiAgICAtLXRleHQ6ICNkMWQ1ZGI7XG4gICAgLS10ZXh0MjogIzljOWZhNDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy92YXJpYWJsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixnQkFBZ0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgICAtLWRhcmstYmc6ICMxMTE4Mjc7XFxuICAgIC0tbWlkLWJnOiAjMTUxZDJjO1xcbiAgICAtLWxpZ2h0LWJnOiAjMWYyOTM3O1xcbiAgICAtLWJvcmRlcjogIzM2M2Y0YjtcXG4gICAgLS10ZXh0OiAjZDFkNWRiO1xcbiAgICAtLXRleHQyOiAjOWM5ZmE0O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAhc2NyaXB0VXJsKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCIvKiBcbuKWiOKWgOKWhCDilogg4paIIOKWiOKWiOKWhCDiloTiloDiloAg4paIIOKWiCDilojilojiloQgXG7ilojiloAgIOKWgOKWhOKWiCDilojiloTilogg4paE4paI4paAIOKWgOKWhOKWiCDilojiloTiloggICovXG4vKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9sZWFybmNvZGVhY2FkZW15Lzc3NzM0OTc0N2Q4MzgyYmZiNzIyICovXG52YXIgUHVic3ViID0ge1xuICAgIFB1YnN1Yjoge30sXG4gICAgb246IGZ1bmN0aW9uIChldmVudE5hbWUsIGZuKSB7XG4gICAgICAgIHRoaXMuUHVic3ViW2V2ZW50TmFtZV0gPSB0aGlzLlB1YnN1YltldmVudE5hbWVdIHx8IFtdO1xuICAgICAgICB0aGlzLlB1YnN1YltldmVudE5hbWVdLnB1c2goZm4pO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBmbikge1xuICAgICAgICBpZiAodGhpcy5QdWJzdWJbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlB1YnN1YltldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuUHVic3ViW2V2ZW50TmFtZV1baV0gPT09IGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuUHVic3ViW2V2ZW50TmFtZV0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuUHVic3ViW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuUHVic3ViW2V2ZW50TmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgICBmbihkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFB1YnN1YjtcbiIsImltcG9ydCBQdWJzdWIgZnJvbSBcIi4vUHVic3ViXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2sge1xuICAgICNuYW1lO1xuICAgICNpc0RvbmU7XG4gICAgI2R1ZURhdGU7XG4gICAgY29uc3RydWN0b3IobmFtZSwgX2lzRG9uZSkge1xuICAgICAgICB0aGlzLiNuYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy4jaXNEb25lID0gX2lzRG9uZTtcbiAgICAgICAgdGhpcy4jZHVlRGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNuYW1lO1xuICAgIH1cbiAgICBzZXQgbmFtZShhcmcpIHtcbiAgICAgICAgdGhpcy4jbmFtZSA9IGFyZztcbiAgICB9XG4gICAgZ2V0IGlzRG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2lzRG9uZTtcbiAgICB9XG4gICAgc2V0IGlzRG9uZShhcmcpIHtcbiAgICAgICAgdGhpcy4jaXNEb25lID0gYXJnO1xuICAgIH1cbiAgICBnZXQgZHVlRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2R1ZURhdGU7XG4gICAgfVxuICAgIHNldCBkdWVEYXRlKGFyZykge1xuICAgICAgICB0aGlzLiNkdWVEYXRlID0gYXJnO1xuICAgIH1cbiAgICBnZXQgcGFyc2UoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLiNuYW1lLFxuICAgICAgICAgICAgaXNEb25lOiB0aGlzLiNpc0RvbmUsXG4gICAgICAgICAgICBkdWVEYXRlOiB0aGlzLiNkdWVEYXRlLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsImltcG9ydCBUYXNrIGZyb20gXCIuL1Rhc2tcIjtcbmltcG9ydCBQdWJzdWIgZnJvbSBcIi4vUHVic3ViXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3Qge1xuICAgICNpZDtcbiAgICAjbmFtZTtcbiAgICAjdGFza3MgPSB7fTtcbiAgICAjdGFncyA9IFtdO1xuICAgIGNvbnN0cnVjdG9yKF9pZCwgX25hbWUsIF9vYmpUYXNrcykge1xuICAgICAgICB0aGlzLiNpZCA9IF9pZDtcbiAgICAgICAgdGhpcy4jbmFtZSA9IF9uYW1lO1xuICAgICAgICBpZiAoX29ialRhc2tzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBfb2JqVGFza3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiN0YXNrc1trZXldID0gbmV3IFRhc2soXG4gICAgICAgICAgICAgICAgICAgIF9vYmpUYXNrc1trZXldLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIF9vYmpUYXNrc1trZXldLmlzRG9uZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdGFza3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN0YXNrcztcbiAgICB9XG4gICAgc2V0IHRhc2tzKGFyZykge31cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI25hbWU7XG4gICAgfVxuICAgIHNldCBuYW1lKGFyZykge1xuICAgICAgICB0aGlzLiNuYW1lID0gYXJnO1xuICAgIH1cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNpZDtcbiAgICB9XG4gICAgZ2V0IHBhcnNlKCkge1xuICAgICAgICBsZXQgb3V0cHV0VGFza3MgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4jdGFza3MpIHtcbiAgICAgICAgICAgIG91dHB1dFRhc2tzW2tleV0gPSB0aGlzLiN0YXNrc1trZXldLnBhcnNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGlkOiB0aGlzLiNpZCwgbmFtZTogdGhpcy4jbmFtZSwgdGFza3M6IG91dHB1dFRhc2tzIH07XG4gICAgfVxufVxuIiwiaW1wb3J0IExpc3QgZnJvbSBcIi4vTGlzdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yYWdlIHtcbiAgICBzdGF0aWMgI2xpc3RzU3RvcmFnZSA9IHt9O1xuXG4gICAgc3RhdGljIHNhdmUoKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICBjb25zdCBkYXRhQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4jbGlzdHNTdG9yYWdlKSB7XG4gICAgICAgICAgICBkYXRhQXJyYXkucHVzaChba2V5LCB0aGlzLiNsaXN0c1N0b3JhZ2Vba2V5XS5wYXJzZV0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGFNYXAgPSBuZXcgTWFwKGRhdGFBcnJheSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgXCJkYXRhXCIsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShBcnJheS5mcm9tKGRhdGFNYXAuZW50cmllcygpKSlcbiAgICAgICAgKTtcbiAgICB9XG4gICAgc3RhdGljIGxvYWQoKSB7XG4gICAgICAgIHRoaXMuI2xpc3RzU3RvcmFnZSA9IHt9O1xuXG4gICAgICAgIGNvbnN0IHN0b3JlZERhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZGF0YVwiKSk7XG4gICAgICAgIGlmICghc3RvcmVkRGF0YSkgcmV0dXJuO1xuICAgICAgICBzdG9yZWREYXRhLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZWxlbWVudFswXTtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBlbGVtZW50WzFdO1xuICAgICAgICAgICAgdGhpcy4jbGlzdHNTdG9yYWdlW2lkXSA9IG5ldyBMaXN0KGlkLCBsaXN0Lm5hbWUsIGxpc3QudGFza3MpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGxpc3RzU3RvcmFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2xpc3RzU3RvcmFnZTtcbiAgICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZCYXIge1xuICAgICNvdXRwdXQ7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuI291dHB1dCA9IHRoaXMuI3JlbmRlcigpO1xuICAgICAgICB0aGlzLiNiaW5kRXZlbnRzKCk7XG4gICAgfVxuICAgICNyZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGBEZXdEZXcuaXRgO1xuICAgICAgICBlbGVtZW50LmlkID0gXCJuYXZcIjtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICAgICNiaW5kRXZlbnRzKCkge31cbiAgICBnZXQgb3V0cHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jb3V0cHV0O1xuICAgIH1cbn1cbiIsImltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51QmFyIHtcbiAgICAjb3V0cHV0O1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLiNvdXRwdXQgPSB0aGlzLiNyZW5kZXIoKTtcbiAgICAgICAgdGhpcy4jYmluZEV2ZW50cygpO1xuICAgIH1cbiAgICAjcmVuZGVyKCkge1xuICAgICAgICAvL0JVVFRPTlNcbiAgICAgICAgY29uc3QgbWFpbkJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBtYWluQnV0dG9ucy5pZCA9IFwibWFpbkJ1dHRvbnNcIjtcblxuICAgICAgICBjb25zdCBidG5OZXdMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgYnRuTmV3TGlzdC5pZCA9IFwiYnRuTmV3TGlzdFwiO1xuICAgICAgICBidG5OZXdMaXN0LmlubmVyVGV4dCA9IFwiTmV3IExpc3RcIjtcbiAgICAgICAgbWFpbkJ1dHRvbnMuYXBwZW5kQ2hpbGQoYnRuTmV3TGlzdCk7XG5cbiAgICAgICAgcmV0dXJuIG1haW5CdXR0b25zO1xuICAgIH1cbiAgICAjYmluZEV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgYnRuTmV3TGlzdCA9IHRoaXMuI291dHB1dC5xdWVyeVNlbGVjdG9yKFwiI2J0bk5ld0xpc3RcIik7XG4gICAgICAgIGJ0bk5ld0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIFB1YnN1Yi5lbWl0KFwibmV3TGlzdFwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBvdXRwdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNvdXRwdXQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi9QdWJzdWJcIjtcbmltcG9ydCBpbWdDbG9zZSBmcm9tIFwiLi9pbWcvY2xvc2Uuc3ZnXCI7XG5pbXBvcnQgaW1nUGx1cyBmcm9tIFwiLi9pbWcvcGx1cy5zdmdcIjtcblxuY2xhc3MgaW5wdXRUaXRsZSB7XG4gICAgI2xpc3Q7XG4gICAgI291dHB1dDtcbiAgICBjb25zdHJ1Y3RvcihsaXN0KSB7XG4gICAgICAgIHRoaXMuI2xpc3QgPSBsaXN0O1xuICAgICAgICB0aGlzLiNvdXRwdXQgPSB0aGlzLiNyZW5kZXIoKTtcbiAgICAgICAgdGhpcy4jYmluZEV2ZW50cygpO1xuICAgIH1cbiAgICAjcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBpbnB1dFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dFRpdGxlLnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgaW5wdXRUaXRsZS5jbGFzc0xpc3QuYWRkKFwibmFtZVwiKTtcbiAgICAgICAgaW5wdXRUaXRsZS52YWx1ZSA9IHRoaXMuI2xpc3QubmFtZTtcbiAgICAgICAgcmV0dXJuIGlucHV0VGl0bGU7XG4gICAgfVxuICAgICNiaW5kRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBjYXJkTmFtZSA9IHRoaXMuI291dHB1dDtcbiAgICAgICAgY2FyZE5hbWUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnNlbGVjdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FyZE5hbWUuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBQdWJzdWIuZW1pdChcInVwZGF0ZUxpc3ROYW1lXCIsIHtcbiAgICAgICAgICAgICAgICBpZDogdGhpcy4jbGlzdC5pZCxcbiAgICAgICAgICAgICAgICBuZXdOYW1lOiBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFB1YnN1Yi5lbWl0KFwicmVsb2FkUGFnZVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBvdXRwdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNvdXRwdXQ7XG4gICAgfVxufVxuXG5jbGFzcyBidG5SZW1vdmVMaXN0IHtcbiAgICAjbGlzdDtcbiAgICAjb3V0cHV0O1xuICAgIGNvbnN0cnVjdG9yKGxpc3QpIHtcbiAgICAgICAgdGhpcy4jbGlzdCA9IGxpc3Q7XG4gICAgICAgIHRoaXMuI291dHB1dCA9IHRoaXMuI3JlbmRlcigpO1xuICAgICAgICB0aGlzLiNiaW5kRXZlbnRzKCk7XG4gICAgfVxuICAgICNyZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHJlbW92ZUxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICByZW1vdmVMaXN0LnNyYyA9IGltZ0Nsb3NlO1xuICAgICAgICByZW1vdmVMaXN0LmNsYXNzTGlzdC5hZGQoXCJwYXJlbnRIb3ZlclJlbW92ZUxpc3RcIik7XG4gICAgICAgIHJldHVybiByZW1vdmVMaXN0O1xuICAgIH1cbiAgICAjYmluZEV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgcmVtb3ZlTGlzdCA9IHRoaXMuI291dHB1dDtcbiAgICAgICAgcmVtb3ZlTGlzdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgUHVic3ViLmVtaXQoXCJyZW1vdmVMaXN0XCIsIHRoaXMuI2xpc3QpO1xuICAgICAgICAgICAgUHVic3ViLmVtaXQoXCJyZWxvYWRQYWdlXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI291dHB1dDtcbiAgICB9XG59XG5cbmNsYXNzIHRhc2tMaXN0IHtcbiAgICAjbGlzdDtcbiAgICAjb3V0cHV0O1xuICAgIGNvbnN0cnVjdG9yKGxpc3QpIHtcbiAgICAgICAgdGhpcy4jbGlzdCA9IGxpc3Q7XG4gICAgICAgIHRoaXMuI291dHB1dCA9IHRoaXMuI3JlbmRlcigpO1xuICAgICAgICB0aGlzLiNiaW5kRXZlbnRzKCk7XG4gICAgfVxuICAgICNyZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHRhc2tMaXN0ID0gdGhpcy4jbGlzdC50YXNrcztcbiAgICAgICAgY29uc3QgdWxUYXNrcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGFza0xpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuXG4gICAgICAgICAgICAvL0VBQ0ggQ0hFQ0tCT1hcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgY2hlY2tib3gudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0YXNrTGlzdFtrZXldLmlzRG9uZTtcbiAgICAgICAgICAgIGNoZWNrYm94LnNldEF0dHJpYnV0ZShcImRhdGEtdGFza2lkXCIsIGtleSk7XG4gICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChjaGVja2JveCk7XG5cbiAgICAgICAgICAgIC8vRUFDSCBMQUJFTC9JTlBVVFxuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKFwidGFza1wiKTtcbiAgICAgICAgICAgIGxhYmVsLnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZShcImRhdGEtdGFza2lkXCIsIGtleSk7XG4gICAgICAgICAgICBsYWJlbC52YWx1ZSA9IHRhc2tMaXN0W2tleV0ubmFtZTtcbiAgICAgICAgICAgIGlmICh0YXNrTGlzdFtrZXldLmlzRG9uZSkgbGFiZWwuY2xhc3NMaXN0LmFkZChcImlzRG9uZVwiKTtcblxuICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgICAgICAgICAvL0VBQ0ggcmVtb3ZlVGFzayBCVVRUT05cbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZVRhc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgcmVtb3ZlVGFzay5zcmMgPSBpbWdDbG9zZTtcbiAgICAgICAgICAgIHJlbW92ZVRhc2suY2xhc3NMaXN0ID0gXCJwYXJlbnRIb3ZlclJlbW92ZVRhc2tcIjtcbiAgICAgICAgICAgIHJlbW92ZVRhc2suc2V0QXR0cmlidXRlKFwiZGF0YS10YXNraWRcIiwga2V5KTtcbiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKHJlbW92ZVRhc2spO1xuXG4gICAgICAgICAgICB1bFRhc2tzLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQUREIE5FVyBUQVNLXG4gICAgICAgIGNvbnN0IG5ld1Rhc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgbmV3VGFza0xhYmVsLnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgbmV3VGFza0xhYmVsLmNsYXNzTGlzdC5hZGQoXCJuZXdUYXNrXCIpO1xuICAgICAgICBuZXdUYXNrTGFiZWwucGxhY2Vob2xkZXIgPSBcIkFkZCBuZXcgdGFza1wiO1xuICAgICAgICBuZXdUYXNrTGFiZWwuaW5uZXJUZXh0ID0gXCJcIjtcblxuICAgICAgICBjb25zdCBwbHVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgcGx1cy5zcmMgPSBpbWdQbHVzO1xuICAgICAgICBwbHVzLmNsYXNzTGlzdC5hZGQoXCJwbHVzSWNvblwiKTtcbiAgICAgICAgbmV3VGFzay5hcHBlbmRDaGlsZChwbHVzKTtcbiAgICAgICAgbmV3VGFzay5hcHBlbmRDaGlsZChuZXdUYXNrTGFiZWwpO1xuICAgICAgICB1bFRhc2tzLmFwcGVuZENoaWxkKG5ld1Rhc2spO1xuXG4gICAgICAgIHJldHVybiB1bFRhc2tzO1xuICAgIH1cbiAgICAjYmluZEV2ZW50cygpIHtcbiAgICAgICAgLy9DSEVDS0JPWEVTXG4gICAgICAgIGNvbnN0IGNoZWNrQm94ZXMgPSB0aGlzLiNvdXRwdXQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nXG4gICAgICAgICk7XG4gICAgICAgIGNoZWNrQm94ZXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdElEID0gdGhpcy4jbGlzdC5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrSUQgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10YXNraWRcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SXNEb25lID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgUHVic3ViLmVtaXQoXCJ1cGRhdGVJc0RvbmVcIiwgeyBsaXN0SUQsIHRhc2tJRCwgbmV3SXNEb25lIH0pO1xuICAgICAgICAgICAgICAgIFB1YnN1Yi5lbWl0KFwicmVsb2FkUGFnZVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL1RBU0tTXG4gICAgICAgIGNvbnN0IHRhc2tzID0gdGhpcy4jb3V0cHV0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFza1wiKTtcbiAgICAgICAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgICAgICAgICAgdGFzay5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGFza2lkXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSB0aGlzLiNsaXN0LnRhc2tzW2lkXTtcbiAgICAgICAgICAgICAgICB0YXNrLm5hbWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgUHVic3ViLmVtaXQoXCJyZWxvYWRQYWdlXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vQUREIE5FVyBUQVNLIElOUFVUXG4gICAgICAgIGNvbnN0IGFkZE5ld1Rhc2sgPSB0aGlzLiNvdXRwdXQucXVlcnlTZWxlY3RvcihcIi5uZXdUYXNrXCIpO1xuICAgICAgICBhZGROZXdUYXNrLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgaXNEb25lID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBsaXN0SUQgPSB0aGlzLiNsaXN0LmlkO1xuICAgICAgICAgICAgUHVic3ViLmVtaXQoXCJuZXdUYXNrXCIsIHsgbmFtZSwgaXNEb25lLCBsaXN0SUQgfSk7XG4gICAgICAgICAgICBQdWJzdWIuZW1pdChcInJlbG9hZFBhZ2VcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vRUFDSCByZW1vdmVUYXNrIEJVVFRPTlxuICAgICAgICBjb25zdCByZW1vdmVUYXNrID0gdGhpcy4jb3V0cHV0LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICBcIi5wYXJlbnRIb3ZlclJlbW92ZVRhc2tcIlxuICAgICAgICApO1xuICAgICAgICByZW1vdmVUYXNrLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLiNsaXN0LnRhc2tzW1xuICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10YXNraWRcIilcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIFB1YnN1Yi5lbWl0KFwicmVsb2FkUGFnZVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI291dHB1dDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJX0xpc3Qge1xuICAgICNkaXZDYXJkO1xuICAgICNsaXN0O1xuICAgIGNvbG9yO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy4jbGlzdCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuY29sb3IgPSB7IGg6IGVsZW1lbnQuaWQgKiAyNTUsIHM6IDcwLCBsOiA3MCB9O1xuICAgICAgICB0aGlzLiNyZW5kZXIoKTtcbiAgICAgICAgdGhpcy4jYmluZEV2ZW50cygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLiNkaXZDYXJkO1xuICAgIH1cblxuICAgICNyZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGRpdkNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBkaXZDYXJkLmNsYXNzTGlzdC5hZGQoXCJjYXJkXCIpO1xuICAgICAgICBkaXZDYXJkLnN0eWxlLmJvcmRlclRvcCA9IGAyMHB4IHNvbGlkIGhzbChcbiAgICAgICAgICAgICR7dGhpcy5jb2xvci5ofSxcbiAgICAgICAgICAgICR7dGhpcy5jb2xvci5zfSUsXG4gICAgICAgICAgICAke3RoaXMuY29sb3IubH0lKWA7XG5cbiAgICAgICAgZGl2Q2FyZC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGlkPSd0aXRsZSc+PC9kaXY+XG4gICAgICAgIGA7XG4gICAgICAgIC8vVElUTEVcbiAgICAgICAgZGl2Q2FyZFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIjdGl0bGVcIilcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZChuZXcgaW5wdXRUaXRsZSh0aGlzLiNsaXN0KS5vdXRwdXQpO1xuXG4gICAgICAgIC8vUkVNT1ZFIExJU1RcbiAgICAgICAgZGl2Q2FyZFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIjdGl0bGVcIilcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZChuZXcgYnRuUmVtb3ZlTGlzdCh0aGlzLiNsaXN0KS5vdXRwdXQpO1xuXG4gICAgICAgIC8vVEFTS1NcbiAgICAgICAgZGl2Q2FyZC5hcHBlbmRDaGlsZChuZXcgdGFza0xpc3QodGhpcy4jbGlzdCkub3V0cHV0KTtcblxuICAgICAgICAvKiAvL0RVRSBEQVRFXG4gICAgICAgIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBkdWVEYXRlLmlubmVyVGV4dCA9IFwiRHVlIERhdGVcIjtcbiAgICAgICAgZGl2Q2FyZC5hcHBlbmRDaGlsZChkdWVEYXRlKTsgKi9cblxuICAgICAgICAvL0FERCBUTyBPQkpFQ1RcbiAgICAgICAgdGhpcy4jZGl2Q2FyZCA9IGRpdkNhcmQ7XG4gICAgfVxuICAgICNiaW5kRXZlbnRzKCkge31cbn1cbiIsImltcG9ydCBVSV9MaXN0IGZyb20gXCIuLi9VSV9MaXN0XCI7XG5pbXBvcnQgU3RvcmFnZSBmcm9tIFwiLi4vU3RvcmFnZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluQ29udGVudCB7XG4gICAgI291dHB1dDtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy4jb3V0cHV0ID0gdGhpcy4jcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuI2JpbmRFdmVudHMoKTtcbiAgICB9XG4gICAgI3JlbmRlcigpIHtcbiAgICAgICAgLy9NQUlOIENPTlRFTlRcbiAgICAgICAgY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBtYWluQ29udGVudC5pZCA9IFwibWFpbkNvbnRlbnRcIjtcblxuICAgICAgICBjb25zdCBsaXN0cyA9IFN0b3JhZ2UubGlzdHNTdG9yYWdlO1xuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGxpc3RzKSB7XG4gICAgICAgICAgICBtYWluQ29udGVudC5hcHBlbmRDaGlsZChuZXcgVUlfTGlzdChsaXN0c1trZXldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1haW5Db250ZW50O1xuICAgIH1cbiAgICAjYmluZEV2ZW50cygpIHt9XG4gICAgZ2V0IG91dHB1dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI291dHB1dDtcbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb290ZXIge1xuICAgICN5ZWFyO1xuICAgICNvdXRwdXQ7XG4gICAgY29uc3RydWN0b3IoeWVhcikge1xuICAgICAgICB0aGlzLiN5ZWFyID0geWVhcjtcbiAgICAgICAgdGhpcy4jb3V0cHV0ID0gdGhpcy4jcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuI2JpbmRFdmVudHMoKTtcbiAgICB9XG4gICAgI3JlbmRlcigpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuICAgICAgICBsZXQgZm9vdGVyU3RyaW5nO1xuICAgICAgICBjb25zdCB5ZWFyID0gdGhpcy4jeWVhci50b1N0cmluZygpO1xuICAgICAgICBmb290ZXJTdHJpbmcgPSB5ZWFyO1xuICAgICAgICBpZiAoIXllYXIuaW5jbHVkZXMoY3VycmVudFllYXIpKSB7XG4gICAgICAgICAgICBmb290ZXJTdHJpbmcgPSBmb290ZXJTdHJpbmcgKyBcIi1cIiArIGN1cnJlbnRZZWFyICsgXCIgLSBcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXZGb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9vdGVyXCIpO1xuICAgICAgICBkaXZGb290ZXIuaW5uZXJIVE1MID0gYFxuICAgIDxzbWFsbD5cbiAgICAgICAgJmNvcHk7IENvcHlyaWdodCAke2Zvb3RlclN0cmluZ31cbiAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9wb3JrZW52b2xmXCIgdGFyZ2V0PVwi4oCdX2JsYW5r4oCdXCI+XG4gICAgICAgICAgICBQb3JrZW52w7ZsZlxuICAgICAgICA8L2E+XG4gICAgPC9zbWFsbD5cbiAgICBgO1xuICAgICAgICBkaXZGb290ZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICBkaXZGb290ZXIuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImNlbnRlclwiO1xuICAgICAgICBkaXZGb290ZXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG4gICAgICAgIGRpdkZvb3Rlci5zdHlsZS5oZWlnaHQgPSBcIjNyZW1cIjtcblxuICAgICAgICByZXR1cm4gZGl2Rm9vdGVyO1xuICAgIH1cbiAgICAjYmluZEV2ZW50cygpIHt9XG4gICAgZ2V0IG91dHB1dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI291dHB1dDtcbiAgICB9XG59XG4iLCJpbXBvcnQgXCIuL2Nzcy9zdHlsZS5jc3NcIjtcbmltcG9ydCB7IHJlbmRlckZvb3RlciB9IGZyb20gXCIuL2Zvb3RlclwiO1xuXG5pbXBvcnQgTmF2QmFyIGZyb20gXCIuL21vZHVsZXMvTmF2QmFyXCI7XG5pbXBvcnQgTWVudUJhciBmcm9tIFwiLi9tb2R1bGVzL01lbnVCYXJcIjtcbmltcG9ydCBNYWluQ29udGVudCBmcm9tIFwiLi9tb2R1bGVzL01haW5Db250ZW50XCI7XG5pbXBvcnQgRm9vdGVyIGZyb20gXCIuL21vZHVsZXMvRm9vdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJIHtcbiAgICBzdGF0aWMgbG9hZFBhZ2UoKSB7XG4gICAgICAgIHRoaXMuYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICAgICAgICB0aGlzLmJvZHkuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgdGhpcy5ib2R5LmFwcGVuZENoaWxkKG5ldyBOYXZCYXIoKS5vdXRwdXQpO1xuICAgICAgICB0aGlzLmJvZHkuYXBwZW5kQ2hpbGQobmV3IE1lbnVCYXIoKS5vdXRwdXQpO1xuICAgICAgICB0aGlzLmJvZHkuYXBwZW5kQ2hpbGQobmV3IE1haW5Db250ZW50KCkub3V0cHV0KTtcbiAgICAgICAgdGhpcy5ib2R5LmFwcGVuZENoaWxkKG5ldyBGb290ZXIoMjAyMykub3V0cHV0KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUHVic3ViIGZyb20gXCIuL1B1YnN1YlwiO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSBcIi4vU3RvcmFnZVwiO1xuaW1wb3J0IFVJIGZyb20gXCIuL1VJXCI7XG5pbXBvcnQgVGFzayBmcm9tIFwiLi9UYXNrXCI7XG5pbXBvcnQgTGlzdCBmcm9tIFwiLi9MaXN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50c0ludGVyZmFjZSB7XG4gICAgc3RhdGljIGJpbmRFdmVudHMoKSB7XG4gICAgICAgIC8vU1RPUkFHRVxuICAgICAgICBQdWJzdWIub24oXCJzYXZlXCIsICgpID0+IHtcbiAgICAgICAgICAgIFN0b3JhZ2Uuc2F2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgUHVic3ViLm9uKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBTdG9yYWdlLmxvYWQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9VSVxuICAgICAgICBQdWJzdWIub24oXCJyZWxvYWRQYWdlXCIsICgpID0+IHtcbiAgICAgICAgICAgIFVJLmxvYWRQYWdlKCk7XG4gICAgICAgICAgICBQdWJzdWIuZW1pdChcInNhdmVcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vTElTVFNcbiAgICAgICAgUHVic3ViLm9uKFwibmV3TGlzdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdJRCA9IE1hdGgucmFuZG9tKCkudG9GaXhlZCg1KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0xpc3QgPSBuZXcgTGlzdChuZXdJRCwgXCJOZXcgTGlzdFwiLCB7fSk7XG4gICAgICAgICAgICBTdG9yYWdlLmxpc3RzU3RvcmFnZVtuZXdJRF0gPSBuZXdMaXN0O1xuXG4gICAgICAgICAgICBQdWJzdWIuZW1pdChcInJlbG9hZFBhZ2VcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBQdWJzdWIub24oXCJyZW1vdmVMaXN0XCIsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgU3RvcmFnZS5saXN0c1N0b3JhZ2VbZGF0YS5pZF07XG5cbiAgICAgICAgICAgIFB1YnN1Yi5lbWl0KFwicmVsb2FkUGFnZVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFB1YnN1Yi5vbihcInVwZGF0ZUxpc3ROYW1lXCIsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGRhdGEuaWQ7XG4gICAgICAgICAgICBjb25zdCBuZXdOYW1lID0gZGF0YS5uZXdOYW1lO1xuICAgICAgICAgICAgU3RvcmFnZS5saXN0c1N0b3JhZ2VbaWRdLm5hbWUgPSBuZXdOYW1lO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL1RBU0tTXG4gICAgICAgIFB1YnN1Yi5vbihcIm5ld1Rhc2tcIiwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgICAgICBjb25zdCBpc0RvbmUgPSBkYXRhLmlzRG9uZTtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJRCA9IGRhdGEubGlzdElEO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdJRCA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgICAgICBjb25zdCBuZXdUYXNrID0gbmV3IFRhc2sobmFtZSwgaXNEb25lKTtcbiAgICAgICAgICAgIFN0b3JhZ2UubGlzdHNTdG9yYWdlW2xpc3RJRF0udGFza3NbbmV3SURdID0gbmV3VGFzaztcbiAgICAgICAgfSk7XG4gICAgICAgIFB1YnN1Yi5vbihcInVwZGF0ZUlzRG9uZVwiLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlzdElEID0gZGF0YS5saXN0SUQ7XG4gICAgICAgICAgICBjb25zdCB0YXNrSUQgPSBkYXRhLnRhc2tJRDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0lzRG9uZSA9IGRhdGEubmV3SXNEb25lO1xuICAgICAgICAgICAgU3RvcmFnZS5saXN0c1N0b3JhZ2VbbGlzdElEXS50YXNrc1t0YXNrSURdLmlzRG9uZSA9IG5ld0lzRG9uZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFN0b3JhZ2UgZnJvbSBcIi4vU3RvcmFnZS5qc1wiO1xuaW1wb3J0IEV2ZW50c0ludGVyZmFjZSBmcm9tIFwiLi9FdmVudHNJbnRlcmZhY2VcIjtcbmltcG9ydCBVSSBmcm9tIFwiLi9VSVwiO1xuaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi9QdWJzdWIuanNcIjtcblxuRXZlbnRzSW50ZXJmYWNlLmJpbmRFdmVudHMoKTtcblxuUHVic3ViLmVtaXQoXCJsb2FkXCIpO1xuVUkubG9hZFBhZ2UoKTtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImkiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsIm5jIiwiUHVic3ViIiwib24iLCJldmVudE5hbWUiLCJmbiIsIm9mZiIsImVtaXQiLCJmb3JFYWNoIiwiVGFzayIsImNvbnN0cnVjdG9yIiwibmFtZSIsIl9pc0RvbmUiLCJhcmciLCJpc0RvbmUiLCJkdWVEYXRlIiwicGFyc2UiLCJMaXN0IiwiX2lkIiwiX25hbWUiLCJfb2JqVGFza3MiLCJ0YXNrcyIsIm91dHB1dFRhc2tzIiwiU3RvcmFnZSIsInN0YXRpYyIsInNhdmUiLCJsb2NhbFN0b3JhZ2UiLCJjbGVhciIsImRhdGFBcnJheSIsImRhdGFNYXAiLCJNYXAiLCJzZXRJdGVtIiwiQXJyYXkiLCJmcm9tIiwiZW50cmllcyIsImxvYWQiLCJzdG9yZWREYXRhIiwiZ2V0SXRlbSIsImxpc3RzU3RvcmFnZSIsImxvY2FscyIsIk5hdkJhciIsImlubmVySFRNTCIsIm91dHB1dCIsIk1lbnVCYXIiLCJtYWluQnV0dG9ucyIsImJ0bk5ld0xpc3QiLCJpbm5lclRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5wdXRUaXRsZSIsInR5cGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJ2YWx1ZSIsImNhcmROYW1lIiwiZXZlbnQiLCJzZWxlY3QiLCJwcmV2ZW50RGVmYXVsdCIsIm5ld05hbWUiLCJidG5SZW1vdmVMaXN0IiwicmVtb3ZlTGlzdCIsInRhc2tMaXN0IiwidWxUYXNrcyIsImxpIiwiY2hlY2tib3giLCJjaGVja2VkIiwibGFiZWwiLCJyZW1vdmVUYXNrIiwibmV3VGFzayIsIm5ld1Rhc2tMYWJlbCIsInBsYWNlaG9sZGVyIiwicGx1cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsaXN0SUQiLCJ0YXNrSUQiLCJnZXRBdHRyaWJ1dGUiLCJuZXdJc0RvbmUiLCJ0YXNrIiwiVUlfTGlzdCIsImNvbG9yIiwiaCIsInMiLCJsIiwiZGl2Q2FyZCIsImJvcmRlclRvcCIsIk1haW5Db250ZW50IiwibWFpbkNvbnRlbnQiLCJsaXN0cyIsIkZvb3RlciIsInllYXIiLCJmb290ZXJTdHJpbmciLCJjdXJyZW50WWVhciIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImluY2x1ZGVzIiwiZGl2Rm9vdGVyIiwiZGlzcGxheSIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImhlaWdodCIsIlVJIiwibG9hZFBhZ2UiLCJib2R5IiwiYmluZEV2ZW50cyIsIm5ld0lEIiwiTWF0aCIsInJhbmRvbSIsInRvRml4ZWQiXSwic291cmNlUm9vdCI6IiJ9